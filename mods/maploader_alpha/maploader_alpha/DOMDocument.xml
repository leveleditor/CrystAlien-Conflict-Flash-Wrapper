<DOMDocument xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" width="750" frameRate="31" currentTimeline="1" xflVersion="2.1" creatorInfo="Adobe Flash Professional CS5.5" platform="Windows" versionInfo="Saved by Adobe Flash Windows 11.5 build 349" majorVersion="11" minorVersion="5" buildNumber="349" gridSnapTo="true" objectsSnapTo="false" breakPointCount="2" timelineLabelWidth="226" viewAngle3D="70.7391536835427" nextSceneIdentifier="2" playOptionsPlayLoop="false" playOptionsPlayPages="false" playOptionsPlayFrameActions="false">
     <folders>
          <DOMFolderItem name="Menu Clips" itemID="5b9d703d-00000284" isExpanded="true"/>
     </folders>
     <symbols>
          <Include href="Menu Clips/ButtonHitArea.xml" itemIcon="1" loadImmediate="false" itemID="540cb5e0-0000022c" lastModified="1410119136"/>
          <Include href="Menu Clips/LoadButton.xml" itemIcon="0" loadImmediate="false" itemID="52f86656-00000012" lastModified="1537044622"/>
     </symbols>
     <timelines>
          <DOMTimeline name="Scene 1">
               <layers>
                    <DOMLayer name="Hooks" color="#4FFF4F" locked="true" autoNamed="false" visible="false" layerType="folder"/>
                    <DOMLayer name="GameHook" color="#9933CC" parentLayerIndex="0" locked="true" autoNamed="false" visible="false">
                         <frames>
                              <DOMFrame index="0" keyMode="9728">
                                   <Actionscript>
                                        <script><![CDATA[function GameHook(parent, team, level) {
	this.data["map1338"] = mapDataString.split("",10000);

	var hook4:Object = wrapper.addPostHook(this.handle,
		function() {
			if (this.level.level == 1338 && this.parent.state == "movie") {
				this.parent.doEndMovie("skip");
			}
		}
	);
	this.handle = hook4.override;
}]]></script>
                                   </Actionscript>
                                   <elements/>
                              </DOMFrame>
                         </frames>
                    </DOMLayer>
                    <DOMLayer name="LevelStats" color="#FF800A" parentLayerIndex="0" locked="true" autoNamed="false" visible="false">
                         <frames>
                              <DOMFrame index="0" keyMode="9728">
                                   <Actionscript>
                                        <script><![CDATA[function LevelStatsHook(parent) {
	var hook3:Object = wrapper.addPostHook(this.setup,
		function () {
			if (this.level == 1338)
			{
				this.training = Boolean(mapDataJsonObject["IsTraining"]);
				this.isConflict = Boolean(mapDataJsonObject["IsConflict"]);
				this.isSpecialLevel = Boolean(mapDataJsonObject["IsSpecialLevel"]);
				this.IsLastSpecialLevel = Boolean(mapDataJsonObject["IsLastSpecialLevel"]);
				this.isBonusLevel = Boolean(mapDataJsonObject["IsBonusLevel"]);
				
				//this.buildings.push(a = new game.Building(this, "BA_evil", 2, 2, "good"));
				//function Building(parent, type, x, y, team, damage)
				for (var i = 0; i < buildings.length; i++) {
					var b;
					this.buildings.push(
						b = new game.Building(
							this,
							buildings[i][1],
							buildings[i][2],
							buildings[i][3],
							buildings[i][4],
							buildings[i][5]
						)
					);
				}
	
				//this.units.push(new game.Unit(this, "UA_good", 11, 12, .5, null, null, "seek", null, true));
				//function Unit(parent,type,x,y,angle,team,damage,target,obj,respawn)
				for (var i = 0; i < units.length; i++) {
					var u;
					this.units.push(
						u = new game.Unit(
							this,
							units[i][1],
							units[i][2],
							units[i][3],
							units[i][4],
							units[i][5],
							units[i][6],
							units[i][7],
							units[i][8],
							units[i][9]
						)
					);
					rejigabsolute(u, units[i][10], units[i][11]);
				}
	
				var mapText = '"' + mapDataJsonObject["Title"] + '"';
				if (mapDataJsonObject["Author"] != "") {
					mapText += "<br/>by " + mapDataJsonObject["Author"];
				}
				this.indicators.push(new game.Indicator(this, null, null, mapText, "message", 120));
				
				//this.camera.focus = a;
				this.cash = Number(mapDataJsonObject["CashPlayer"]);
				this.cashOppo = Number(mapDataJsonObject["CashEnemy"]);
				this.jukebox = 1;
			}
		}
	);
	this.setup = hook3.override;
	

	var hook5:Object = wrapper.addPreHook(this.outcome,
		function() {
			if (!this.active) {
				return;
			}
			if (this.level == 1338) {
				/*if (this.findBuilding("BA_evil").friend) {
					this.win();
				}*/
			}
		}
	);
	this.outcome = hook5.override;

}]]></script>
                                   </Actionscript>
                                   <elements/>
                              </DOMFrame>
                         </frames>
                    </DOMLayer>
                    <DOMLayer name="Mod" color="#4FFF4F" locked="true" autoNamed="false" layerType="folder"/>
                    <DOMLayer name="ExternalFunctions" color="#4FFF4F" parentLayerIndex="3" locked="true" autoNamed="false" visible="false">
                         <frames>
                              <DOMFrame index="0" keyMode="9728">
                                   <Actionscript>
                                        <script><![CDATA[import flash.external.ExternalInterface;

function getMapData():String {
	var result = null;
	if (ExternalInterface.available) {
		try {
			result = ExternalInterface.call("getMapData");
			if (result == null) {
				Log("getMapData() function returned null!");
			}
		} catch (e:Error) {
			Log("getMapData() function unavailable.");
		}
	} else {
		if (wrapper.levelDataJson) {
			result = wrapper.levelDataJson;
			Log("getMapData() : Retrieved from passed parameters.");
		} else {
			Log("getMapData() : ExternalInterface not available.");
		}
	}
	return result;
}]]></script>
                                   </Actionscript>
                                   <elements/>
                              </DOMFrame>
                         </frames>
                    </DOMLayer>
                    <DOMLayer name="Functions" color="#4FFF4F" parentLayerIndex="3" locked="true" autoNamed="false" visible="false">
                         <frames>
                              <DOMFrame index="0" keyMode="9728">
                                   <Actionscript>
                                        <script><![CDATA[import utils.JSON;

function Log(message:String):Void {
	wrapper.Log(message);
}

function num2ascii(num:Number):String {
	if (num < 0) {
		num = 0;
	}
	var chars = new Array(" ","!","#","$","%","&","'","(",")","*","+",",","-",".","/","0","1","2","3","4","5","6","7","8","9",":",";","<","=",">","?","@","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","[","]","^","_","`","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","{","|","}","~","€","ƒ","„","…","†","‡","ˆ","‰","Š","‹","Œ","Ž","‘","’","“","”","•","–","—","˜","™","š","›","œ","","ž","Ÿ","¡","¢","£","¤","¥","¦","§","¨","©","ª","«","¬","­","®","¯","°","±","²","³","´","µ","¶","·","¸","¹","º","»","¼","½","¾","¿","À","Á","Â","Ã","Ä","Å","Æ","Ç","È","É","Ê","Ë","Ì","Í","Î","Ï","Ð","Ñ","Ò","Ó","Ô","Õ","Ö","×","Ø","Ù","Ú","Û","Ü","Ý","Þ","ß","à","á","â","ã","ä","å","æ","ç","è","é","ê","ë","ì","í","î","ï","ð","ñ","ò","ó","ô","õ","ö","÷","ø","ù","ú","û","ü","ý","þ","ÿ");
	return chars[num];
}

function normalizeValue(value:Object):Object {
	if (value === "null" || value === null || value === undefined) {
		return null;
	} else if (typeof(value) === "boolean") {
		return value;
	} else if (value === "False" || value === "false") {
		return false;
	} else if (value === "True" || value === "true") {
		return true;
	} else if (Number(value) > 0) {
		return Number(value);
	} else {
		return value;
	}
}

// Map data tile Ids in 2d array of numbers mapData[y][x]
var mapData:Array = new Array();
// Map data converted to ascii string
var mapDataString:String = "";
function injectTiles(mapW:Number, mapH:Number, tilesData:Array) {
	var i:Number = 0;
	for (var y = 0; y < mapH; y++) {
		for (var x = 0; x < mapW; x++) {
			mapData[y][x] = Number(tilesData[i]);
			i++;
		}
	}
}

function rejigabsolute(what, absx, absy) {
	var x = absx / what.nav.arena.tileSize;
	var y = absy / what.nav.arena.tileSize2;
	var rx = Math.round(x);
	var ry = Math.round(y);
	if (rx > x) {
		x = 1 - (rx - x);
	} else {
		x = x - rx;
	}
	if (ry > y) {
		y = 1 - (ry - y);
	} else {
		y = y - ry;
	}
	what.nav.offsetX = x;
	what.nav.offsetY = y;
	what.posX = (what.nav.currentX -(1-x)) * what.nav.arena.tileSize;
	what.posY = (what.nav.currentY -(1-y)) * what.nav.arena.tileSize;
}
function CAMMtoCACBuildingPos(type:String, oldx:Number, oldy:Number) {
	var b = new game.BuildingStats(type);
	var w:Number = b.width;
	var h:Number = b.height;
	var x:Number = oldx;
	var y:Number = oldy;
	if (w == 1) x++;
	if (w == 2) x++;
	if (w == 4) x+=2;
	if (h == 2) y++;
	if (h == 3) y+=2;
	if (h == 4) y+=3;
	return {x : x, y : y};
}
function UnitPosAbsoluteToGrid(absx:Number, absy:Number) {
	var x:Number = absx / 96;
	var y:Number = absy / 48;
	var rx = Math.round(x);
	var ry = Math.round(y);
	if (rx < x) {
		x = x + 1;
	}
	if (ry < y) {
		y = y + 1;
	}
	x = Math.round(x);
	y = Math.round(y);
	return {x : x, y : y};
}

var units = new Array();
function injectUnits(unitsData:Array) {
	for (var i in unitsData) {
		var data:Object = unitsData[i];
		data["AiTarget"] = normalizeValue(data["AiTarget"]);
		data["AiObj"] = normalizeValue(data["AiObj"]);
		data["Respawn"] = normalizeValue(data["Respawn"]);
		
		var newPos = UnitPosAbsoluteToGrid(data["X"], data["Y"]);
		units.push([
			game.panel.game.level,
			data["Id"],
			newPos.x,
			newPos.y,
			Number(data["Angle"]),
			((data["Team"] == '0') ? 'good' : 'evil'),
			Number(data["Damage"]),
			data["AiTarget"],
			data["AiObj"],
			Boolean(data["Respawn"]),
			Number(data["X"]),
			Number(data["Y"])
		]);
	}
}

var buildings = new Array();
function injectBuildings(buildingsData:Array) {
	for (var i in buildingsData) {
		var data:Object = buildingsData[i];
		var newPos = CAMMtoCACBuildingPos(data["Id"], Number(data["X"]), Number(data["Y"]));
		buildings.push([
			game.panel.game.level,
			data["Id"],
			newPos.x,
			newPos.y,
			((data["Team"] == '0') ? 'good' : 'evil'),
			Number(data["Damage"])
		]);
	}
}

function injectObjects(input:String) {
	try {
		mapDataJsonObject = JSON.parse(input);
		var o:Object = mapDataJsonObject;
		Log("Title = " + o["Title"]);
		
		var mapW:Number = 0;
		var mapH:Number = 0;
		var mapTeam:Number = 0;
		var ascii:String = "";
		
		mapW = Number(o["Width"]);
		ascii = num2ascii(mapW);
		mapDataString += ascii;
		Log("    Map Size W: " + mapW + " => \"" + ascii + "\"");
		
		mapH = Number(o["Height"]);
		ascii = num2ascii(mapH);
		mapDataString += ascii;
		Log("    Map Size H: " + mapH + " => \"" + ascii + "\"");
		
		mapData = new Array();
		for (var y = 0; y < mapH; y++) {
			mapData[y] = new Array();
			for (var x = 0; x < mapW; x++) {
				mapData[y][x] = -1;
			}
		}
		
		mapTeam = Number(o["Team"]);
		
		injectTiles(mapW, mapH, o["Tiles"]);
		injectBuildings(o["Buildings"]);
		injectUnits(o["Units"]);
		
		for (var y = 0; y < mapH; y++) {
			for (var x = 0; x < mapW; x++) {
				mapDataString += num2ascii(mapData[y][x]);
			}
		}
		Log("Full Map/Terrain/Tile Data:\n\"" + mapDataString + "\"");
		
		game.panel.teams1337[1338] = ((mapTeam == 0) ? "good" : "evil");
	} catch(ex) {
		trace(ex.name + ":" + ex.message + ":" + ex.at + ":" + ex.text);
	}
}]]></script>
                                   </Actionscript>
                                   <elements/>
                              </DOMFrame>
                         </frames>
                    </DOMLayer>
                    <DOMLayer name="UploadFunctions" color="#9933CC" parentLayerIndex="3" locked="true" autoNamed="false" visible="false">
                         <frames>
                              <DOMFrame index="0" keyMode="9728">
                                   <Actionscript>
                                        <script><![CDATA[import flash.net.FileReference;

var downloadUrl:String = "";

var fileRef:FileReference = new FileReference();
var types:Array = new Array({description:"CAMM Map Files (*.camm)", extension:"*.camm", macType:"CAMM"});

function onSelect(file:FileReference):Void {
	btnUpload.enabled = false;
	btnUpload._visible = false;
	
	Log("onSelect: " + file.name);
	var result:Boolean = false;
	result = file.upload("map_uploader.php");
	Log(result.toString());
	if (!result) {
		// try again using a full URL, as you are probably testing or something
		result = file.upload("https://crystalien-redux.com/dev/mods/maploader_alpha/map_uploader.php");
		Log(result.toString());
	}
}

function onCancel(file:FileReference):Void {
	Log("onCancel");
}

function onOpen(file:FileReference):Void {
	Log("onOpen: " + file.name);
}

function onProgress(file:FileReference, bytesLoaded:Number, bytesTotal:Number):Void {
	Log("onProgress with bytesLoaded: " + bytesLoaded + " bytesTotal: " + bytesTotal);
}

function onComplete(file:FileReference):Void {
	Log("onComplete: " + file.name);
}

function onHTTPError(file:FileReference, httpError:Number):Void {
	Log("onHTTPError: " + file.name + " httpError: " + httpError);
}

function onIOError(file:FileReference):Void {
	Log("onIOError: " + file.name);
}

function onSecurityError(file:FileReference, errorString:String):Void {
	Log("onSecurityError: " + file.name + " errorString: " + errorString);
}

function onUploadCompleteData(file:FileReference, dataString:String):Void {
	var parts:Array = dataString.split("\n", 1);

	Log("onUploadCompleteData: " + file.name + " data: \n" + parts[0]);
	var data:Array = parts[0].split("|", 4);
	if (data[0] == "success" && Number(data[1]) == 1) {
		downloadUrl = data[3];
	}

	var content:String = substring(dataString, parts[0].length + 2, dataString.length + 1 - parts[0].length + 2);
	//Log("Content = " + content);

	injectObjects(content);
}

fileRef.addListener(this);
]]></script>
                                   </Actionscript>
                                   <elements/>
                              </DOMFrame>
                         </frames>
                    </DOMLayer>
                    <DOMLayer name="CACMod" color="#4FFF4F" parentLayerIndex="3" locked="true" current="true" isSelected="true" autoNamed="false" visible="false">
                         <frames>
                              <DOMFrame index="0" keyMode="9728">
                                   <Actionscript>
                                        <script><![CDATA[var wrapper:MovieClip;
var game:MovieClip;
var hookedIn:Boolean = false;

function CACMod_Error(errmsg:String):Void {
	wrapper.Log("oh noes! An error '" + errmsg + "' just happened!");
}

function CACMod_Init(parent:MovieClip):Number {
	wrapper = parent;
	
	return 1;
}

var mapDataJsonString:String = null;
var mapDataJsonObject:Object = null;
function CACMod_OnGameMenu():Void {
	if (!hookedIn) {
		// Make a nicer reference to the game's root.
		game = _root["_level1"];

		game.panel.codes[1338] = "custom";
		
		var hook1:Object = wrapper.addPostHook(game.Game, GameHook);
		game.Game = hook1.override;
		
		var hook2:Object = wrapper.addPostHook(game.LevelStats, LevelStatsHook);
		game.LevelStats = hook2.override;
		
		mapDataJsonString = getMapData();
		if (mapDataJsonString != null) {
			injectObjects(mapDataJsonString);
		} else {
			Log("No map data found, displaying upload button");
			btnUpload._visible = true;
			btnUpload.enabled = true;
		}
		
		hookedIn = true;
		wrapper.Log("Map Loader Alpha: All hooked in...");
	}
	
	// Automatically reload custom level when back on the main menu
	if (hookedIn && mapDataJsonString != null) {
		stopAllSounds();
		game.panel.enterCode("custom");
	}
}
]]></script>
                                   </Actionscript>
                                   <elements/>
                              </DOMFrame>
                         </frames>
                    </DOMLayer>
                    <DOMLayer name="My Code" color="#FF800A" parentLayerIndex="3" locked="true" autoNamed="false" visible="false">
                         <frames>
                              <DOMFrame index="0" keyMode="9728">
                                   <Actionscript>
                                        <script><![CDATA[stop();]]></script>
                                   </Actionscript>
                                   <elements/>
                              </DOMFrame>
                         </frames>
                    </DOMLayer>
                    <DOMLayer name="Controls" color="#9933CC" parentLayerIndex="3" autoNamed="false">
                         <frames>
                              <DOMFrame index="0" keyMode="9728">
                                   <elements>
                                        <DOMSymbolInstance libraryItemName="Menu Clips/LoadButton" name="btnUpload" symbolType="button" isVisible="false">
                                             <matrix>
                                                  <Matrix tx="675" ty="370"/>
                                             </matrix>
                                             <transformationPoint>
                                                  <Point x="50" y="11"/>
                                             </transformationPoint>
                                             <Actionscript>
                                                  <script><![CDATA[on (release) {
	import flash.net.FileReference;
	
	this.fileRef.browse(this.types);
}]]></script>
                                             </Actionscript>
                                        </DOMSymbolInstance>
                                   </elements>
                              </DOMFrame>
                         </frames>
                    </DOMLayer>
               </layers>
          </DOMTimeline>
     </timelines>
     <persistentData>
          <PD n="DebugMovieChecked" v="FlashPro"/>
          <PD n="TestMovieChecked" v="FlashPro"/>
     </persistentData>
     <PrinterSettings/>
     <publishHistory/>
</DOMDocument>