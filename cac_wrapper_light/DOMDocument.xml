<DOMDocument xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" backgroundColor="#000000" width="600" frameRate="23" currentTimeline="1" xflVersion="2.1" creatorInfo="Adobe Flash Professional CS5.5" platform="Windows" versionInfo="Saved by Adobe Flash Windows 11.5 build 349" majorVersion="11" minorVersion="5" buildNumber="349" gridSnapTo="true" objectsSnapTo="false" breakPointCount="1" viewAngle3D="59.1837342884091" nextSceneIdentifier="4" playOptionsPlayLoop="false" playOptionsPlayPages="false" playOptionsPlayFrameActions="false" autoSaveEnabled="true" autoSaveHasPrompted="true">
     <folders>
          <DOMFolderItem name="Components" itemID="55a1ada6-00000235" isExpanded="true"/>
          <DOMFolderItem name="Control Clips" itemID="54051896-000001fd" isExpanded="true"/>
          <DOMFolderItem name="Menu Clips" itemID="55a1b647-0000100d" isExpanded="true"/>
     </folders>
     <media>
          <DOMCompiledClipItem name="Components/ProgressBar" itemID="53518715-000000a3" linkageExportForAS="true" linkageIdentifier="ProgressBar" sourceExternalFilepath="../cac_wrapper/LIBRARY/Components/ProgressBar" sourceLastImported="1164217986" tooltip="Progress Bar" customIconID="0" actionscriptClass="mx.controls.ProgressBar" swfScmHRef="9g4lxb8l18.swf" swfScmSourceFilename="C:\Users\Josh\AppData\Local\Adobe\Flash CS4\en\Configuration\TMP4wx4j48tyy..swf" persistLivePreview11="true" editFrameIndex="1" requiredMinimumPlayerVersion="0" requiredMinimumASVersion="0" parametersAreLocked="true" swcPath="Components/ProgressBar.xml" rootSymbolLinkageID="ProgressBar" movieRectRight="3000" movieRectBottom="600" playerVersion="6" actionscriptVersion="2">
               <parametersAsXML><![CDATA[   <property id="conversion">
      <Inspectable name="conversion" variable="conversion" category="" verbose="0" defaultValue="1" type="Default"/>
   </property>
   <property id="direction">
      <Inspectable name="direction" variable="direction" category="" verbose="0" defaultValue="right" enumeration="left,right" type="List"/>
   </property>
   <property id="label">
      <Inspectable name="label" variable="label" category="" verbose="0" defaultValue="LOADING %3%% " type="Default"/>
   </property>
   <property id="labelPlacement">
      <Inspectable name="labelPlacement" variable="labelPlacement" category="" verbose="0" defaultValue="bottom" enumeration="left,right,top,bottom,center" type="List"/>
   </property>
   <property id="mode">
      <Inspectable name="mode" variable="mode" category="" verbose="0" defaultValue="event" enumeration="event,polled,manual" type="List"/>
   </property>
   <property id="source">
      <Inspectable name="source" variable="source" category="" verbose="0" defaultValue="" type="Default"/>
   </property>
   <property id="visible">
      <Inspectable name="visible" variable="visible" category="Other" verbose="1" defaultValue="true" type="Boolean"/>
   </property>
   <property id="minHeight">
      <Inspectable name="minHeight" variable="minHeight" category="Size" verbose="1" defaultValue="0" type="Number"/>
   </property>
   <property id="minWidth">
      <Inspectable name="minWidth" variable="minWidth" category="Size" verbose="1" defaultValue="0" type="Number"/>
   </property>
]]></parametersAsXML>
               <classProperties><![CDATA[<?xml version="1.0" encoding ="utf-8"?>
<componentPackage xmlns="http://www.macromedia.com/flash/swccatalog/7">
<component id="ProgressBar" class="mx.controls.ProgressBar" implementation="ProgressBar.swf" iconFile="ProgressBar.png" tooltip="Progress Bar" src="mx.controls.ProgressBar.asi" modified="1055744780">
<movieBounds xmin="0" xmax="3000" ymin="0" ymax="600" />
    <include id="BoundingBox"/>
    <include id="UIComponent"/>
    <include id="UIObject"/>
    <include id="ProgressBarAssets"/>
    <exportAfter id="__Packages.mx.controls.ProgressBar"/>
<class id="mx.controls.ProgressBar" >
      <Event param1="complete" />
      <Event param1="progress" />
      <TagName param1="ProgressBar" />
      <IconFile param1="ProgressBar.png" />
   <method id="conversion" returnType="Void">
      <param id="x" type="Number" />
      <Inspectable defaultValue="1" />
   </method>
   <method id="direction" returnType="Void">
      <param id="x" type="String" />
      <Inspectable enumeration="left,right" defaultValue="right" />
   </method>
   <method id="label" returnType="Void">
      <param id="x" type="String" />
      <Inspectable defaultValue="LOADING %3%% " />
   </method>
   <method id="labelPlacement" returnType="Void">
      <param id="x" type="String" />
      <Inspectable enumeration="left,right,top,bottom,center" defaultValue="bottom" />
   </method>
   <method id="mode" returnType="Void">
      <param id="x" type="String" />
      <Inspectable enumeration="event,polled,manual" defaultValue="event" />
   </method>
   <method id="percentComplete" returnType="Number">
      <Bindable param1="readonly" />
      <ChangeEvent param1="progress" />
   </method>
   <method id="source" >
      <param id="x"  />
      <Inspectable defaultValue="" />
   </method>
   <method id="value" returnType="Number">
      <Bindable param1="readonly" />
      <ChangeEvent param1="progress" />
   </method>
</class>
<class id="mx.core.UIObject" >
      <Event param1="resize" />
      <Event param1="move" />
      <Event param1="draw" />
      <Event param1="load" />
      <Event param1="unload" />
   <method id="minHeight" returnType="Number">
      <Inspectable defaultValue="0" verbose="1" category="Size" />
   </method>
   <method id="minWidth" returnType="Number">
      <Inspectable defaultValue="0" verbose="1" category="Size" />
   </method>
   <method id="visible" returnType="Boolean">
      <Inspectable defaultValue="true" verbose="1" category="Other" />
   </method>
</class>
<class id="MovieClip" >
</class>
<asset id="BoundingBox" modified="1054593655">
</asset>
<asset id="UIComponentExtensions" modified="1058814666">
      <exportAfter id="__Packages.mx.core.ext.UIComponentExtensions"/>
</asset>
<asset id="FocusRect" modified="1055744819">
      <include id="BoundingBox"/>
      <exportAfter id="__Packages.mx.skins.halo.FocusRect"/>
</asset>
<asset id="FocusManager" modified="1082415917">
      <include id="FocusRect"/>
      <include id="UIObject"/>
      <exportAfter id="__Packages.mx.managers.FocusManager"/>
</asset>
<asset id="UIObjectExtensions" modified="1058814702">
      <exportAfter id="__Packages.mx.core.ext.UIObjectExtensions"/>
</asset>
<asset id="Defaults" modified="1055737279">
      <exportAfter id="__Packages.mx.skins.halo.Defaults"/>
</asset>
<asset id="UIObject" modified="1058814731">
      <include id="Defaults"/>
      <include id="UIObjectExtensions"/>
      <exportAfter id="__Packages.mx.core.UIObject"/>
</asset>
<asset id="UIComponent" modified="1058814700">
      <include id="UIObject"/>
      <include id="FocusManager"/>
      <include id="UIComponentExtensions"/>
      <exportAfter id="__Packages.mx.core.UIComponent"/>
</asset>
<asset id="ProgTrackRight" modified="1062224978">
</asset>
<asset id="ProgTrackMiddle" modified="1062224974">
</asset>
<asset id="ProgTrackLeft" modified="1062224973">
</asset>
<asset id="ProgBarIndMiddleThemeColor" modified="1062224943">
</asset>
<asset id="ProgBarIndThemeColor" modified="1062224946">
</asset>
<asset id="ProgIndBar" modified="1062224971">
      <include id="ProgBarIndThemeColor"/>
      <include id="ProgBarIndThemeColor"/>
      <include id="ProgBarIndMiddleThemeColor"/>
      <include id="ProgBarIndMiddleThemeColor"/>
      <include id="ProgBarIndMiddleThemeColor"/>
</asset>
<asset id="ProgBarMiddleThemeColor" modified="1062224961">
</asset>
<asset id="ProgBarMiddle" modified="1062224959">
      <include id="ProgBarMiddleThemeColor"/>
      <include id="ProgBarMiddleThemeColor"/>
      <include id="ProgBarMiddleThemeColor"/>
</asset>
<asset id="ProgBarLeft" modified="1062224952">
      <include id="ProgBarCapThemeColor"/>
      <include id="ProgBarCapThemeColor"/>
      <include id="ProgBarCapThemeColor"/>
</asset>
<asset id="ProgBarCapThemeColor" modified="1062224942">
</asset>
<asset id="ProgBarRight" modified="1062224966">
      <include id="ProgBarCapThemeColor"/>
      <include id="ProgBarCapThemeColor"/>
      <include id="ProgBarCapThemeColor"/>
</asset>
<asset id="ProgressBarAssets" modified="1062224984">
      <include id="ProgBarRight"/>
      <include id="ProgBarLeft"/>
      <include id="ProgBarMiddle"/>
      <include id="ProgIndBar"/>
      <include id="ProgTrackLeft"/>
      <include id="ProgTrackMiddle"/>
      <include id="ProgTrackRight"/>
</asset>
<asset id="__Packages.mx.skins.ColoredSkinElement" src="mx.skins.ColoredSkinElement.asi" modified="1164217986">
</asset>
<asset id="__Packages.mx.core.UIObject" src="mx.core.UIObject.asi" modified="1164217985">
    <include id="__Packages.mx.skins.SkinElement" />
    <include id="__Packages.mx.styles.CSSStyleDeclaration" />
    <include id="__Packages.mx.styles.StyleManager" />
</asset>
<asset id="__Packages.mx.skins.SkinElement" src="mx.skins.SkinElement.asi" modified="1164217986">
</asset>
<asset id="__Packages.mx.styles.CSSTextStyles" src="mx.styles.CSSTextStyles.asi" modified="1164217986">
</asset>
<asset id="__Packages.mx.styles.CSSStyleDeclaration" src="mx.styles.CSSStyleDeclaration.asi" modified="1164217986">
    <include id="__Packages.mx.styles.StyleManager" />
    <exportAfter id="__Packages.mx.styles.CSSTextStyles" />
</asset>
<asset id="__Packages.mx.styles.StyleManager" src="mx.styles.StyleManager.asi" modified="1164217986">
</asset>
<asset id="__Packages.mx.controls.ProgressBar" src="mx.controls.ProgressBar.asi" modified="1164217983">
    <exportAfter id="__Packages.mx.core.UIObject" />
</asset>
<asset id="__Packages.mx.events.EventDispatcher" src="mx.events.EventDispatcher.asi" modified="1164217985">
</asset>
<asset id="__Packages.mx.events.UIEventDispatcher" src="mx.events.UIEventDispatcher.asi" modified="1164217986">
    <exportAfter id="__Packages.mx.events.EventDispatcher" />
</asset>
<asset id="__Packages.mx.core.ext.UIObjectExtensions" src="mx.core.ext.UIObjectExtensions.asi" modified="1164217985">
    <include id="__Packages.mx.skins.ColoredSkinElement" />
    <include id="__Packages.mx.styles.CSSStyleDeclaration" />
    <exportAfter id="__Packages.mx.core.UIObject" />
    <exportAfter id="__Packages.mx.skins.SkinElement" />
    <exportAfter id="__Packages.mx.styles.CSSTextStyles" />
    <exportAfter id="__Packages.mx.events.UIEventDispatcher" />
</asset>
<asset id="__Packages.mx.core.UIComponent" src="mx.core.UIComponent.asi" modified="1164217985">
    <exportAfter id="__Packages.mx.core.UIObject" />
</asset>
<asset id="__Packages.mx.skins.halo.Defaults" src="mx.skins.halo.Defaults.asi" modified="1164217986">
    <include id="__Packages.mx.core.UIComponent" />
    <exportAfter id="__Packages.mx.core.UIObject" />
    <exportAfter id="__Packages.mx.styles.CSSStyleDeclaration" />
    <exportAfter id="__Packages.mx.core.ext.UIObjectExtensions" />
</asset>
<asset id="__Packages.mx.skins.halo.FocusRect" src="mx.skins.halo.FocusRect.asi" modified="1164217986">
    <include id="__Packages.mx.managers.DepthManager" />
    <exportAfter id="__Packages.mx.skins.SkinElement" />
    <exportAfter id="__Packages.mx.core.UIComponent" />
    <exportAfter id="__Packages.mx.skins.halo.Defaults" />
</asset>
<asset id="__Packages.mx.managers.DepthManager" src="mx.managers.DepthManager.asi" modified="1164217986">
    <include id="__Packages.mx.core.UIObject" />
</asset>
<asset id="__Packages.mx.managers.FocusManager" src="mx.managers.FocusManager.asi" modified="1164217986">
    <include id="__Packages.mx.managers.DepthManager" />
    <include id="__Packages.mx.controls.SimpleButton" />
    <include id="__Packages.mx.managers.SystemManager" />
    <exportAfter id="__Packages.mx.core.ext.UIObjectExtensions" />
    <exportAfter id="__Packages.mx.core.UIComponent" />
</asset>
<asset id="__Packages.mx.controls.SimpleButton" src="mx.controls.SimpleButton.asi" modified="1164217983">
    <exportAfter id="__Packages.mx.core.UIComponent" />
</asset>
<asset id="__Packages.mx.managers.SystemManager" src="mx.managers.SystemManager.asi" modified="1164217986">
    <include id="__Packages.mx.events.EventDispatcher" />
    <include id="__Packages.mx.core.UIComponent" />
</asset>
<asset id="__Packages.mx.managers.OverlappedWindows" src="mx.managers.OverlappedWindows.asi" modified="1164217986">
    <include id="__Packages.mx.core.UIComponent" />
    <exportAfter id="__Packages.mx.managers.SystemManager" />
</asset>
<asset id="__Packages.mx.core.ext.UIComponentExtensions" src="mx.core.ext.UIComponentExtensions.asi" modified="1164217985">
    <include id="__Packages.mx.styles.CSSSetStyle" />
    <exportAfter id="__Packages.mx.core.UIComponent" />
    <exportAfter id="__Packages.mx.managers.FocusManager" />
    <exportAfter id="__Packages.mx.managers.OverlappedWindows" />
</asset>
<asset id="__Packages.mx.styles.CSSSetStyle" src="mx.styles.CSSSetStyle.asi" modified="1164217986">
    <include id="__Packages.mx.styles.StyleManager" />
    <exportAfter id="__Packages.mx.styles.CSSStyleDeclaration" />
</asset>
</component>
</componentPackage>
]]></classProperties>
               <customIcon>
                    <CustomIcon rowByteCount="72" colorDepth="32" width="18" height="18" frameRight="360" frameBottom="360" isTransparent="true" href="9g4lxb8l182.dat"/>
               </customIcon>
               <SwcItem name="ProgressBar" implementation="ProgressBar.swf" version="1164217986" isTopLevel="true" intrinsicClass="mx.controls.ProgressBar" intrinsicScript='import mx.core.UIObject;&#xD;&#xA;&#xD;&#xA;[Event("complete")] &#xD;&#xA;[Event("progress")] &#xD;&#xA;[TagName("ProgressBar")] &#xD;&#xA;[IconFile("ProgressBar.png")] &#xD;&#xA;intrinsic class mx.controls.ProgressBar extends mx.core.UIObject&#xD;&#xA;{&#xD;&#xA;   public function ProgressBar();&#xD;&#xA;   public var __conversion:Number;&#xD;&#xA;   public var __direction:String;&#xD;&#xA;   public var __indValue:Number;&#xD;&#xA;   public var __indeterminate:Boolean;&#xD;&#xA;   public var __interval:Number;&#xD;&#xA;   public var __label:String;&#xD;&#xA;   public var __labelPlacement:String;&#xD;&#xA;   public var __leave:Number;&#xD;&#xA;   public var __maximum:Number;&#xD;&#xA;   public var __minimum:Number;&#xD;&#xA;   public var __mode:String;&#xD;&#xA;   public var __source:Object;&#xD;&#xA;   public var __stringSource:String;&#xD;&#xA;   public var __value:Number;&#xD;&#xA;   public function _setProgress(completed:Number, total:Number):Void;&#xD;&#xA;   public var boundingBox_mc:Object;&#xD;&#xA;   public var className:String;&#xD;&#xA;   public var clipParameters:Object;&#xD;&#xA;   public function complete(pEvent):Void;&#xD;&#xA;   function get conversion():Number;&#xD;&#xA;   [Inspectable(defaultValue=1)] function set conversion(x:Number):Void;&#xD;&#xA;   public function createChildren(Void):Void;&#xD;&#xA;   function get direction():String;&#xD;&#xA;   [Inspectable(enumeration="left,right", defaultValue="right")] function set direction(x:String):Void;&#xD;&#xA;   public function draw(Void):Void;&#xD;&#xA;   public function getConversion(Void):Number;&#xD;&#xA;   public function getDirection(Void):String;&#xD;&#xA;   public function getIndeterminate(Void):Boolean;&#xD;&#xA;   public function getLabel(Void):String;&#xD;&#xA;   public function getLabelPlacement(Void):String;&#xD;&#xA;   public function getMaximum(Void):Number;&#xD;&#xA;   public function getMinimum(Void):Number;&#xD;&#xA;   public function getMode(Void):String;&#xD;&#xA;   public function getPercentComplete(Void):Number;&#xD;&#xA;   public function getSource(Void);&#xD;&#xA;   public function getVal(Void):Number;&#xD;&#xA;   public var idNames:Array;&#xD;&#xA;   function get indeterminate():Boolean;&#xD;&#xA;   function set indeterminate(x:Boolean):Void;&#xD;&#xA;   public function init(Void):Void;&#xD;&#xA;   function get label():String;&#xD;&#xA;   [Inspectable(defaultValue="LOADING %3%% ")] function set label(x:String):Void;&#xD;&#xA;   public var labelPath:Object;&#xD;&#xA;   function get labelPlacement():String;&#xD;&#xA;   [Inspectable(enumeration="left,right,top,bottom,center", defaultValue="bottom")] function set labelPlacement(x:String):Void;&#xD;&#xA;   public var mask_mc:Object;&#xD;&#xA;   function get maximum():Number;&#xD;&#xA;   function set maximum(x:Number):Void;&#xD;&#xA;   static var mergedClipParameters:Boolean;&#xD;&#xA;   function get minimum():Number;&#xD;&#xA;   function set minimum(x:Number):Void;&#xD;&#xA;   function get mode():String;&#xD;&#xA;   [Inspectable(enumeration="event,polled,manual", defaultValue="event")] function set mode(x:String):Void;&#xD;&#xA;   [Bindable("readonly")] [ChangeEvent("progress")] function get percentComplete():Number;&#xD;&#xA;   public var progBarLeftName:String;&#xD;&#xA;   public var progBarLeft_mc:Object;&#xD;&#xA;   public var progBarMiddleName:String;&#xD;&#xA;   public var progBarMiddle_mc:Object;&#xD;&#xA;   public var progBarRightName:String;&#xD;&#xA;   public var progBarRight_mc:Object;&#xD;&#xA;   public var progIndBarName:String;&#xD;&#xA;   public var progIndBar_mc:Object;&#xD;&#xA;   public var progTrackLeftName:String;&#xD;&#xA;   public var progTrackLeft_mc:Object;&#xD;&#xA;   public var progTrackMiddleName:String;&#xD;&#xA;   public var progTrackMiddle_mc:Object;&#xD;&#xA;   public var progTrackRightName:String;&#xD;&#xA;   public var progTrackRight_mc:Object;&#xD;&#xA;   public function progress(pEvent):Void;&#xD;&#xA;   public function replace(str:String, from:String, to:String):String;&#xD;&#xA;   public function setConversion(val:Number):Void;&#xD;&#xA;   public function setDirection(val:String):Void;&#xD;&#xA;   public function setIndeterminate(val:Boolean):Void;&#xD;&#xA;   public function setLabel(val:String):Void;&#xD;&#xA;   public function setLabelPlacement(val:String):Void;&#xD;&#xA;   public function setMaximum(val:Number):Void;&#xD;&#xA;   public function setMinimum(val:Number):Void;&#xD;&#xA;   public function setMode(val:String):Void;&#xD;&#xA;   public function setProgress(completed:Number, total:Number):Void;&#xD;&#xA;   public function setSource(val):Void;&#xD;&#xA;   public var si;&#xD;&#xA;   public function size(Void):Void;&#xD;&#xA;   public var skinIDLabel:Number;&#xD;&#xA;   public var skinIDMask:Number;&#xD;&#xA;   public var skinIDProgBarLeft:Number;&#xD;&#xA;   public var skinIDProgBarMiddle:Number;&#xD;&#xA;   public var skinIDProgBarRight:Number;&#xD;&#xA;   public var skinIDProgIndBar:Number;&#xD;&#xA;   public var skinIDProgTrackLeft:Number;&#xD;&#xA;   public var skinIDProgTrackMiddle:Number;&#xD;&#xA;   public var skinIDProgTrackRight:Number;&#xD;&#xA;   function get source();&#xD;&#xA;   [Inspectable(defaultValue="")] function set source(x);&#xD;&#xA;   static var symbolName:String;&#xD;&#xA;   static var symbolOwner:Object;&#xD;&#xA;   public function update(Void):Void;&#xD;&#xA;   [Bindable("readonly")] [ChangeEvent("progress")] function get value():Number;&#xD;&#xA;   static var version:String;&#xD;&#xA;};&#xD;&#xA;'>
                    <assetMap>
                         <AssetMapItem key="BoundingBox">
                              <SwcItem name="BoundingBox" implementation="ProgressBar.swf" version="1054593655" isTopLevel="true"/>
                         </AssetMapItem>
                         <AssetMapItem key="Defaults">
                              <SwcItem name="Defaults" implementation="ProgressBar.swf" version="1055737279" isTopLevel="true">
                                   <exportAfterList>
                                        <ExportAfterItem name="__Packages.mx.skins.halo.Defaults" implementation="ProgressBar.swf"/>
                                   </exportAfterList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="FocusManager">
                              <SwcItem name="FocusManager" implementation="ProgressBar.swf" version="1082415917" isTopLevel="true">
                                   <includesList>
                                        <IncludesItem name="FocusRect" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="UIObject" implementation="ProgressBar.swf"/>
                                   </includesList>
                                   <exportAfterList>
                                        <ExportAfterItem name="__Packages.mx.managers.FocusManager" implementation="ProgressBar.swf"/>
                                   </exportAfterList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="FocusRect">
                              <SwcItem name="FocusRect" implementation="ProgressBar.swf" version="1055744819" isTopLevel="true">
                                   <includesList>
                                        <IncludesItem name="BoundingBox" implementation="ProgressBar.swf"/>
                                   </includesList>
                                   <exportAfterList>
                                        <ExportAfterItem name="__Packages.mx.skins.halo.FocusRect" implementation="ProgressBar.swf"/>
                                   </exportAfterList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="ProgBarCapThemeColor">
                              <SwcItem name="ProgBarCapThemeColor" implementation="ProgressBar.swf" version="1062224942" isTopLevel="true"/>
                         </AssetMapItem>
                         <AssetMapItem key="ProgBarIndMiddleThemeColor">
                              <SwcItem name="ProgBarIndMiddleThemeColor" implementation="ProgressBar.swf" version="1062224943" isTopLevel="true"/>
                         </AssetMapItem>
                         <AssetMapItem key="ProgBarIndThemeColor">
                              <SwcItem name="ProgBarIndThemeColor" implementation="ProgressBar.swf" version="1062224946" isTopLevel="true"/>
                         </AssetMapItem>
                         <AssetMapItem key="ProgBarLeft">
                              <SwcItem name="ProgBarLeft" implementation="ProgressBar.swf" version="1062224952" isTopLevel="true">
                                   <includesList>
                                        <IncludesItem name="ProgBarCapThemeColor" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="ProgBarCapThemeColor" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="ProgBarCapThemeColor" implementation="ProgressBar.swf"/>
                                   </includesList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="ProgBarMiddle">
                              <SwcItem name="ProgBarMiddle" implementation="ProgressBar.swf" version="1062224959" isTopLevel="true">
                                   <includesList>
                                        <IncludesItem name="ProgBarMiddleThemeColor" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="ProgBarMiddleThemeColor" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="ProgBarMiddleThemeColor" implementation="ProgressBar.swf"/>
                                   </includesList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="ProgBarMiddleThemeColor">
                              <SwcItem name="ProgBarMiddleThemeColor" implementation="ProgressBar.swf" version="1062224961" isTopLevel="true"/>
                         </AssetMapItem>
                         <AssetMapItem key="ProgBarRight">
                              <SwcItem name="ProgBarRight" implementation="ProgressBar.swf" version="1062224966" isTopLevel="true">
                                   <includesList>
                                        <IncludesItem name="ProgBarCapThemeColor" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="ProgBarCapThemeColor" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="ProgBarCapThemeColor" implementation="ProgressBar.swf"/>
                                   </includesList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="ProgIndBar">
                              <SwcItem name="ProgIndBar" implementation="ProgressBar.swf" version="1062224971" isTopLevel="true">
                                   <includesList>
                                        <IncludesItem name="ProgBarIndThemeColor" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="ProgBarIndThemeColor" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="ProgBarIndMiddleThemeColor" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="ProgBarIndMiddleThemeColor" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="ProgBarIndMiddleThemeColor" implementation="ProgressBar.swf"/>
                                   </includesList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="ProgTrackLeft">
                              <SwcItem name="ProgTrackLeft" implementation="ProgressBar.swf" version="1062224973" isTopLevel="true"/>
                         </AssetMapItem>
                         <AssetMapItem key="ProgTrackMiddle">
                              <SwcItem name="ProgTrackMiddle" implementation="ProgressBar.swf" version="1062224974" isTopLevel="true"/>
                         </AssetMapItem>
                         <AssetMapItem key="ProgTrackRight">
                              <SwcItem name="ProgTrackRight" implementation="ProgressBar.swf" version="1062224978" isTopLevel="true"/>
                         </AssetMapItem>
                         <AssetMapItem key="ProgressBarAssets">
                              <SwcItem name="ProgressBarAssets" implementation="ProgressBar.swf" version="1062224984" isTopLevel="true">
                                   <includesList>
                                        <IncludesItem name="ProgBarRight" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="ProgBarLeft" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="ProgBarMiddle" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="ProgIndBar" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="ProgTrackLeft" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="ProgTrackMiddle" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="ProgTrackRight" implementation="ProgressBar.swf"/>
                                   </includesList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="UIComponent">
                              <SwcItem name="UIComponent" implementation="ProgressBar.swf" version="1058814700" isTopLevel="true">
                                   <includesList>
                                        <IncludesItem name="UIObject" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="FocusManager" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="UIComponentExtensions" implementation="ProgressBar.swf"/>
                                   </includesList>
                                   <exportAfterList>
                                        <ExportAfterItem name="__Packages.mx.core.UIComponent" implementation="ProgressBar.swf"/>
                                   </exportAfterList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="UIComponentExtensions">
                              <SwcItem name="UIComponentExtensions" implementation="ProgressBar.swf" version="1058814666" isTopLevel="true">
                                   <exportAfterList>
                                        <ExportAfterItem name="__Packages.mx.core.ext.UIComponentExtensions" implementation="ProgressBar.swf"/>
                                   </exportAfterList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="UIObject">
                              <SwcItem name="UIObject" implementation="ProgressBar.swf" version="1058814731" isTopLevel="true">
                                   <includesList>
                                        <IncludesItem name="Defaults" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="UIObjectExtensions" implementation="ProgressBar.swf"/>
                                   </includesList>
                                   <exportAfterList>
                                        <ExportAfterItem name="__Packages.mx.core.UIObject" implementation="ProgressBar.swf"/>
                                   </exportAfterList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="UIObjectExtensions">
                              <SwcItem name="UIObjectExtensions" implementation="ProgressBar.swf" version="1058814702" isTopLevel="true">
                                   <exportAfterList>
                                        <ExportAfterItem name="__Packages.mx.core.ext.UIObjectExtensions" implementation="ProgressBar.swf"/>
                                   </exportAfterList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="__Packages.mx.controls.ProgressBar">
                              <SwcItem name="__Packages.mx.controls.ProgressBar" implementation="ProgressBar.swf" version="1164217983" isTopLevel="true" intrinsicClass="mx.controls.ProgressBar" intrinsicScript='import mx.core.UIObject;&#xD;&#xA;&#xD;&#xA;[Event("complete")] &#xD;&#xA;[Event("progress")] &#xD;&#xA;[TagName("ProgressBar")] &#xD;&#xA;[IconFile("ProgressBar.png")] &#xD;&#xA;intrinsic class mx.controls.ProgressBar extends mx.core.UIObject&#xD;&#xA;{&#xD;&#xA;   public function ProgressBar();&#xD;&#xA;   public var __conversion:Number;&#xD;&#xA;   public var __direction:String;&#xD;&#xA;   public var __indValue:Number;&#xD;&#xA;   public var __indeterminate:Boolean;&#xD;&#xA;   public var __interval:Number;&#xD;&#xA;   public var __label:String;&#xD;&#xA;   public var __labelPlacement:String;&#xD;&#xA;   public var __leave:Number;&#xD;&#xA;   public var __maximum:Number;&#xD;&#xA;   public var __minimum:Number;&#xD;&#xA;   public var __mode:String;&#xD;&#xA;   public var __source:Object;&#xD;&#xA;   public var __stringSource:String;&#xD;&#xA;   public var __value:Number;&#xD;&#xA;   public function _setProgress(completed:Number, total:Number):Void;&#xD;&#xA;   public var boundingBox_mc:Object;&#xD;&#xA;   public var className:String;&#xD;&#xA;   public var clipParameters:Object;&#xD;&#xA;   public function complete(pEvent):Void;&#xD;&#xA;   function get conversion():Number;&#xD;&#xA;   [Inspectable(defaultValue=1)] function set conversion(x:Number):Void;&#xD;&#xA;   public function createChildren(Void):Void;&#xD;&#xA;   function get direction():String;&#xD;&#xA;   [Inspectable(enumeration="left,right", defaultValue="right")] function set direction(x:String):Void;&#xD;&#xA;   public function draw(Void):Void;&#xD;&#xA;   public function getConversion(Void):Number;&#xD;&#xA;   public function getDirection(Void):String;&#xD;&#xA;   public function getIndeterminate(Void):Boolean;&#xD;&#xA;   public function getLabel(Void):String;&#xD;&#xA;   public function getLabelPlacement(Void):String;&#xD;&#xA;   public function getMaximum(Void):Number;&#xD;&#xA;   public function getMinimum(Void):Number;&#xD;&#xA;   public function getMode(Void):String;&#xD;&#xA;   public function getPercentComplete(Void):Number;&#xD;&#xA;   public function getSource(Void);&#xD;&#xA;   public function getVal(Void):Number;&#xD;&#xA;   public var idNames:Array;&#xD;&#xA;   function get indeterminate():Boolean;&#xD;&#xA;   function set indeterminate(x:Boolean):Void;&#xD;&#xA;   public function init(Void):Void;&#xD;&#xA;   function get label():String;&#xD;&#xA;   [Inspectable(defaultValue="LOADING %3%% ")] function set label(x:String):Void;&#xD;&#xA;   public var labelPath:Object;&#xD;&#xA;   function get labelPlacement():String;&#xD;&#xA;   [Inspectable(enumeration="left,right,top,bottom,center", defaultValue="bottom")] function set labelPlacement(x:String):Void;&#xD;&#xA;   public var mask_mc:Object;&#xD;&#xA;   function get maximum():Number;&#xD;&#xA;   function set maximum(x:Number):Void;&#xD;&#xA;   static var mergedClipParameters:Boolean;&#xD;&#xA;   function get minimum():Number;&#xD;&#xA;   function set minimum(x:Number):Void;&#xD;&#xA;   function get mode():String;&#xD;&#xA;   [Inspectable(enumeration="event,polled,manual", defaultValue="event")] function set mode(x:String):Void;&#xD;&#xA;   [Bindable("readonly")] [ChangeEvent("progress")] function get percentComplete():Number;&#xD;&#xA;   public var progBarLeftName:String;&#xD;&#xA;   public var progBarLeft_mc:Object;&#xD;&#xA;   public var progBarMiddleName:String;&#xD;&#xA;   public var progBarMiddle_mc:Object;&#xD;&#xA;   public var progBarRightName:String;&#xD;&#xA;   public var progBarRight_mc:Object;&#xD;&#xA;   public var progIndBarName:String;&#xD;&#xA;   public var progIndBar_mc:Object;&#xD;&#xA;   public var progTrackLeftName:String;&#xD;&#xA;   public var progTrackLeft_mc:Object;&#xD;&#xA;   public var progTrackMiddleName:String;&#xD;&#xA;   public var progTrackMiddle_mc:Object;&#xD;&#xA;   public var progTrackRightName:String;&#xD;&#xA;   public var progTrackRight_mc:Object;&#xD;&#xA;   public function progress(pEvent):Void;&#xD;&#xA;   public function replace(str:String, from:String, to:String):String;&#xD;&#xA;   public function setConversion(val:Number):Void;&#xD;&#xA;   public function setDirection(val:String):Void;&#xD;&#xA;   public function setIndeterminate(val:Boolean):Void;&#xD;&#xA;   public function setLabel(val:String):Void;&#xD;&#xA;   public function setLabelPlacement(val:String):Void;&#xD;&#xA;   public function setMaximum(val:Number):Void;&#xD;&#xA;   public function setMinimum(val:Number):Void;&#xD;&#xA;   public function setMode(val:String):Void;&#xD;&#xA;   public function setProgress(completed:Number, total:Number):Void;&#xD;&#xA;   public function setSource(val):Void;&#xD;&#xA;   public var si;&#xD;&#xA;   public function size(Void):Void;&#xD;&#xA;   public var skinIDLabel:Number;&#xD;&#xA;   public var skinIDMask:Number;&#xD;&#xA;   public var skinIDProgBarLeft:Number;&#xD;&#xA;   public var skinIDProgBarMiddle:Number;&#xD;&#xA;   public var skinIDProgBarRight:Number;&#xD;&#xA;   public var skinIDProgIndBar:Number;&#xD;&#xA;   public var skinIDProgTrackLeft:Number;&#xD;&#xA;   public var skinIDProgTrackMiddle:Number;&#xD;&#xA;   public var skinIDProgTrackRight:Number;&#xD;&#xA;   function get source();&#xD;&#xA;   [Inspectable(defaultValue="")] function set source(x);&#xD;&#xA;   static var symbolName:String;&#xD;&#xA;   static var symbolOwner:Object;&#xD;&#xA;   public function update(Void):Void;&#xD;&#xA;   [Bindable("readonly")] [ChangeEvent("progress")] function get value():Number;&#xD;&#xA;   static var version:String;&#xD;&#xA;};&#xD;&#xA;'>
                                   <exportAfterList>
                                        <ExportAfterItem name="__Packages.mx.core.UIObject" implementation="ProgressBar.swf"/>
                                   </exportAfterList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="__Packages.mx.controls.SimpleButton">
                              <SwcItem name="__Packages.mx.controls.SimpleButton" implementation="ProgressBar.swf" version="1164217983" isTopLevel="true" intrinsicClass="mx.controls.SimpleButton" intrinsicScript='import mx.core.UIComponent;&#xD;&#xA;&#xD;&#xA;[Event("click")] &#xD;&#xA;[TagName("SimpleButton")] &#xD;&#xA;intrinsic class mx.controls.SimpleButton extends mx.core.UIComponent&#xD;&#xA;{&#xD;&#xA;   public function SimpleButton();&#xD;&#xA;   public var __emphasized:Boolean;&#xD;&#xA;   public var __emphatic:Boolean;&#xD;&#xA;   public var __emphaticStyleName:String;&#xD;&#xA;   public var __state:Boolean;&#xD;&#xA;   public var __toggle:Boolean;&#xD;&#xA;   public var autoRepeat:Boolean;&#xD;&#xA;   public var boundingBox_mc:MovieClip;&#xD;&#xA;   public var btnOffset:Number;&#xD;&#xA;   public var buttonDownHandler:Function;&#xD;&#xA;   public function calcSize(Void):Void;&#xD;&#xA;   public function changeIcon(tag:Number, linkageName:String):Void;&#xD;&#xA;   public function changeSkin(tag:Number, linkageName:String):Void;&#xD;&#xA;   public var className:String;&#xD;&#xA;   public var clickHandler:Function;&#xD;&#xA;   public function createChildren(Void):Void;&#xD;&#xA;   public var detail:Number;&#xD;&#xA;   public var dfi;&#xD;&#xA;   public var dfs;&#xD;&#xA;   public var disabledIcon:Object;&#xD;&#xA;   public var disabledSkin:Object;&#xD;&#xA;   public var downIcon:Object;&#xD;&#xA;   public var downSkin:Object;&#xD;&#xA;   public function draw(Void):Void;&#xD;&#xA;   public var dti;&#xD;&#xA;   public var dts;&#xD;&#xA;   function get emphasized():Boolean;&#xD;&#xA;   function set emphasized(val:Boolean);&#xD;&#xA;   static var emphasizedStyleDeclaration;&#xD;&#xA;   static var falseDisabled:Number;&#xD;&#xA;   public var falseDisabledIcon:String;&#xD;&#xA;   public var falseDisabledIconEmphasized:String;&#xD;&#xA;   public var falseDisabledSkin:String;&#xD;&#xA;   public var falseDisabledSkinEmphasized:String;&#xD;&#xA;   static var falseDown:Number;&#xD;&#xA;   public var falseDownIcon:String;&#xD;&#xA;   public var falseDownIconEmphasized:String;&#xD;&#xA;   public var falseDownSkin:String;&#xD;&#xA;   public var falseDownSkinEmphasized:String;&#xD;&#xA;   static var falseOver:Number;&#xD;&#xA;   public var falseOverIcon:String;&#xD;&#xA;   public var falseOverIconEmphasized:String;&#xD;&#xA;   public var falseOverSkin:String;&#xD;&#xA;   public var falseOverSkinEmphasized:String;&#xD;&#xA;   static var falseUp:Number;&#xD;&#xA;   public var falseUpIcon:String;&#xD;&#xA;   public var falseUpIconEmphasized:String;&#xD;&#xA;   public var falseUpSkin:String;&#xD;&#xA;   public var falseUpSkinEmphasized:String;&#xD;&#xA;   public var fdi;&#xD;&#xA;   public var fds;&#xD;&#xA;   public var fri;&#xD;&#xA;   public var frs;&#xD;&#xA;   public var fui;&#xD;&#xA;   public var fus;&#xD;&#xA;   public function getLabel(Void):String;&#xD;&#xA;   public function getSelected():Boolean;&#xD;&#xA;   public function getState(Void):Boolean;&#xD;&#xA;   public function getToggle(Void):Boolean;&#xD;&#xA;   public var iconName:Object;&#xD;&#xA;   public var idNames;&#xD;&#xA;   public function init(Void):Void;&#xD;&#xA;   public var initializing:Boolean;&#xD;&#xA;   public var interval;&#xD;&#xA;   public function keyDown(e:Object):Void;&#xD;&#xA;   public function keyUp(e:Object):Void;&#xD;&#xA;   public var linkLength:Number;&#xD;&#xA;   public function onDragOut(Void):Void;&#xD;&#xA;   public function onDragOver(Void):Void;&#xD;&#xA;   public function onKillFocus(newFocus:Object):Void;&#xD;&#xA;   public function onPress(Void):Void;&#xD;&#xA;   public function onPressDelay(Void):Void;&#xD;&#xA;   public function onPressRepeat(Void):Void;&#xD;&#xA;   public function onRelease(Void):Void;&#xD;&#xA;   public function onReleaseOutside(Void):Void;&#xD;&#xA;   public function onRollOut(Void):Void;&#xD;&#xA;   public function onRollOver(Void):Void;&#xD;&#xA;   public var phase:String;&#xD;&#xA;   public var preset:Boolean;&#xD;&#xA;   public var refNames;&#xD;&#xA;   public function refresh(Void):Void;&#xD;&#xA;   public function removeIcons();&#xD;&#xA;   public var rolloverIcon:Object;&#xD;&#xA;   public var rolloverSkin:Object;&#xD;&#xA;   function set selected(val:Boolean);&#xD;&#xA;   [Inspectable(defaultValue=false)] function get selected():Boolean;&#xD;&#xA;   public function setEnabled(val:Boolean):Void;&#xD;&#xA;   public function setIcon(tag:Number, linkageName:String):Object;&#xD;&#xA;   public function setLabel(val:String):Void;&#xD;&#xA;   public function setSelected(val:Boolean);&#xD;&#xA;   public function setSkin(tag:Number, linkageName:String, initobj:Object):MovieClip;&#xD;&#xA;   public function setState(state:Boolean):Void;&#xD;&#xA;   public function setStateVar(state:Boolean):Void;&#xD;&#xA;   public function setToggle(val:Boolean);&#xD;&#xA;   public function setView(offset:Boolean):Void;&#xD;&#xA;   public function showEmphasized(e:Boolean):Void;&#xD;&#xA;   public function size(Void):Void;&#xD;&#xA;   public var skinName:Object;&#xD;&#xA;   public var stateNames;&#xD;&#xA;   public var style3dInset:Number;&#xD;&#xA;   static var symbolName:String;&#xD;&#xA;   static var symbolOwner:Object;&#xD;&#xA;   public var tagMap;&#xD;&#xA;   public var tdi;&#xD;&#xA;   public var tds;&#xD;&#xA;   function set toggle(val:Boolean);&#xD;&#xA;   [Inspectable(defaultValue=false)] function get toggle():Boolean;&#xD;&#xA;   public var tri;&#xD;&#xA;   public var trs;&#xD;&#xA;   static var trueDisabled:Number;&#xD;&#xA;   public var trueDisabledIcon:String;&#xD;&#xA;   public var trueDisabledIconEmphasized:String;&#xD;&#xA;   public var trueDisabledSkin:String;&#xD;&#xA;   public var trueDisabledSkinEmphasized:String;&#xD;&#xA;   static var trueDown:Number;&#xD;&#xA;   public var trueDownIcon:String;&#xD;&#xA;   public var trueDownIconEmphasized:String;&#xD;&#xA;   public var trueDownSkin:String;&#xD;&#xA;   public var trueDownSkinEmphasized:String;&#xD;&#xA;   static var trueOver:Number;&#xD;&#xA;   public var trueOverIcon:String;&#xD;&#xA;   public var trueOverIconEmphasized:String;&#xD;&#xA;   public var trueOverSkin:String;&#xD;&#xA;   public var trueOverSkinEmphasized:String;&#xD;&#xA;   static var trueUp:Number;&#xD;&#xA;   public var trueUpIcon:String;&#xD;&#xA;   public var trueUpIconEmphasized:String;&#xD;&#xA;   public var trueUpSkin:String;&#xD;&#xA;   public var trueUpSkinEmphasized:String;&#xD;&#xA;   public var tui;&#xD;&#xA;   public var tus;&#xD;&#xA;   public var upIcon:Object;&#xD;&#xA;   public var upSkin:Object;&#xD;&#xA;   function set value(val:Boolean);&#xD;&#xA;   function get value():Boolean;&#xD;&#xA;   static var version:String;&#xD;&#xA;   public function viewIcon(varName:String):Void;&#xD;&#xA;   public function viewSkin(varName:String, initObj:Object):Void;&#xD;&#xA;};&#xD;&#xA;'>
                                   <exportAfterList>
                                        <ExportAfterItem name="__Packages.mx.core.UIComponent" implementation="ProgressBar.swf"/>
                                   </exportAfterList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="__Packages.mx.core.UIComponent">
                              <SwcItem name="__Packages.mx.core.UIComponent" implementation="ProgressBar.swf" version="1164217985" isTopLevel="true" intrinsicClass="mx.core.UIComponent" intrinsicScript='import mx.core.UIObject;&#xD;&#xA;import mx.skins.SkinElement;&#xD;&#xA;&#xD;&#xA;[Event("focusIn")] &#xD;&#xA;[Event("focusOut")] &#xD;&#xA;[Event("keyDown")] &#xD;&#xA;[Event("keyUp")] &#xD;&#xA;intrinsic class mx.core.UIComponent extends mx.core.UIObject&#xD;&#xA;{&#xD;&#xA;   public function UIComponent();&#xD;&#xA;   public var clipParameters:Object;&#xD;&#xA;   public function dispatchValueChangedEvent(value):Void;&#xD;&#xA;   public var drawFocus:Function;&#xD;&#xA;   [Inspectable(defaultValue=true, verbose=1, category="Other")] public var enabled:Boolean;&#xD;&#xA;   public function enabledChanged(id:String, oldValue:Boolean, newValue:Boolean):Boolean;&#xD;&#xA;   public function findFocusFromObject(o:Object):Object;&#xD;&#xA;   public function findFocusInChildren(o:Object):Object;&#xD;&#xA;   public var focusEnabled:Boolean;&#xD;&#xA;   public var focusManager:MovieClip;&#xD;&#xA;   public var focusTextField:Object;&#xD;&#xA;   public function getFocus():Object;&#xD;&#xA;   public function getFocusManager():Object;&#xD;&#xA;   public var groupName:String;&#xD;&#xA;   function get height():Number;&#xD;&#xA;   public function init():Void;&#xD;&#xA;   public function isParent(o:Object):Boolean;&#xD;&#xA;   static var kStretch:Number;&#xD;&#xA;   static var mergedClipParameters:Boolean;&#xD;&#xA;   public function onKillFocus(newFocus:Object):Void;&#xD;&#xA;   public function onSetFocus(oldFocus:Object):Void;&#xD;&#xA;   public var origBorderStyles:Object;&#xD;&#xA;   public var origBorderValues:Object;&#xD;&#xA;   public var popUp:Boolean;&#xD;&#xA;   public function pressFocus():Void;&#xD;&#xA;   public function releaseFocus():Void;&#xD;&#xA;   public function setEnabled(enabled:Boolean):Void;&#xD;&#xA;   public function setFocus():Void;&#xD;&#xA;   public function setVisible(x:Boolean, noEvent:Boolean):Void;&#xD;&#xA;   public function size():Void;&#xD;&#xA;   static var symbolName:String;&#xD;&#xA;   static var symbolOwner:Object;&#xD;&#xA;   public var tabEnabled:Boolean;&#xD;&#xA;   public var tabIndex:Number;&#xD;&#xA;   static var version:String;&#xD;&#xA;   function get width():Number;&#xD;&#xA;};&#xD;&#xA;'>
                                   <exportAfterList>
                                        <ExportAfterItem name="__Packages.mx.core.UIObject" implementation="ProgressBar.swf"/>
                                   </exportAfterList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="__Packages.mx.core.UIObject">
                              <SwcItem name="__Packages.mx.core.UIObject" implementation="ProgressBar.swf" version="1164217985" isTopLevel="true" intrinsicClass="mx.core.UIObject" intrinsicScript='import mx.styles.StyleManager;&#xD;&#xA;import mx.styles.CSSStyleDeclaration;&#xD;&#xA;import mx.skins.SkinElement;&#xD;&#xA;&#xD;&#xA;[Event("resize")] &#xD;&#xA;[Event("move")] &#xD;&#xA;[Event("draw")] &#xD;&#xA;[Event("load")] &#xD;&#xA;[Event("unload")] &#xD;&#xA;intrinsic class mx.core.UIObject extends MovieClip&#xD;&#xA;{&#xD;&#xA;   public function UIObject();&#xD;&#xA;   public function __getTextFormat(tf:TextFormat, bAll:Boolean):Boolean;&#xD;&#xA;   public var __height:Number;&#xD;&#xA;   private var __onUnload:Function;&#xD;&#xA;   public var __width:Number;&#xD;&#xA;   public var _color;&#xD;&#xA;   public function _createChildren(Void):Void;&#xD;&#xA;   private var _endInit:Function;&#xD;&#xA;   public function _getTextFormat(Void):TextFormat;&#xD;&#xA;   private var _id:String;&#xD;&#xA;   private var _maxHeight:Number;&#xD;&#xA;   private var _maxWidth:Number;&#xD;&#xA;   private var _minHeight:Number;&#xD;&#xA;   private var _minWidth:Number;&#xD;&#xA;   private var _preferredHeight:Number;&#xD;&#xA;   private var _preferredWidth:Number;&#xD;&#xA;   private var _tf:TextFormat;&#xD;&#xA;   public var _topmost:Boolean;&#xD;&#xA;   public var addEventListener:Function;&#xD;&#xA;   function get bottom():Number;&#xD;&#xA;   public var buildDepthTable:Function;&#xD;&#xA;   public function cancelAllDoLaters(Void):Void;&#xD;&#xA;   public var changeColorStyleInChildren:Function;&#xD;&#xA;   public var changeTextStyleInChildren:Function;&#xD;&#xA;   public var childrenCreated:Boolean;&#xD;&#xA;   public var className:String;&#xD;&#xA;   public var clipParameters:Object;&#xD;&#xA;   public var color:Number;&#xD;&#xA;   public function constructObject(Void):Void;&#xD;&#xA;   public var createAccessibilityImplementation:Function;&#xD;&#xA;   public var createChildAtDepth:Function;&#xD;&#xA;   public function createChildren(Void):Void;&#xD;&#xA;   public var createClassChildAtDepth:Function;&#xD;&#xA;   public function createClassObject(className:Function, id:String, depth:Number, initobj:Object):mx.core.UIObject;&#xD;&#xA;   public function createEmptyObject(id:String, depth:Number):mx.core.UIObject;&#xD;&#xA;   public var createEvent:Function;&#xD;&#xA;   public function createLabel(name:String, depth:Number, text):TextField;&#xD;&#xA;   public function createObject(linkageName:String, id:String, depth:Number, initobj:Object):MovieClip;&#xD;&#xA;   public function createSkin(tag:Number):mx.core.UIObject;&#xD;&#xA;   public function destroyObject(id:String):Void;&#xD;&#xA;   public var dispatchEvent:Function;&#xD;&#xA;   public function doLater(obj:Object, fn:String):Void;&#xD;&#xA;   public function doLaterDispatcher(Void):Void;&#xD;&#xA;   public function draw(Void):Void;&#xD;&#xA;   public function drawRect(x1:Number, y1:Number, x2:Number, y2:Number):Void;&#xD;&#xA;   public var embedFonts:Boolean;&#xD;&#xA;   public var findNextAvailableDepth:Function;&#xD;&#xA;   public var fontFamily:String;&#xD;&#xA;   public var fontSize:Number;&#xD;&#xA;   public var fontStyle:String;&#xD;&#xA;   public var fontWeight:String;&#xD;&#xA;   public function getClassStyleDeclaration(Void):mx.styles.CSSStyleDeclaration;&#xD;&#xA;   public function getMinHeight(Void):Number;&#xD;&#xA;   public function getMinWidth(Void):Number;&#xD;&#xA;   public function getSkinIDName(tag:Number):String;&#xD;&#xA;   public function getStyle(styleProp:String);&#xD;&#xA;   public function getStyleName(Void):String;&#xD;&#xA;   public var handleEvent:Function;&#xD;&#xA;   function get height():Number;&#xD;&#xA;   public var idNames:Array;&#xD;&#xA;   public var ignoreClassStyleDeclaration:Object;&#xD;&#xA;   public function init(Void):Void;&#xD;&#xA;   public function initFromClipParameters(Void):Void;&#xD;&#xA;   public var initProperties:Function;&#xD;&#xA;   public function invalidate(Void):Void;&#xD;&#xA;   private var invalidateFlag:Boolean;&#xD;&#xA;   public function invalidateStyle(Void):Void;&#xD;&#xA;   function get left():Number;&#xD;&#xA;   private var lineColor:Number;&#xD;&#xA;   private var lineWidth:Number;&#xD;&#xA;   public var marginLeft:Number;&#xD;&#xA;   public var marginRight:Number;&#xD;&#xA;   static function mergeClipParameters(o, p):Boolean;&#xD;&#xA;   public var methodTable:Array;&#xD;&#xA;   [Inspectable(defaultValue=0, verbose=1, category="Size")] function get minHeight():Number;&#xD;&#xA;   function set minHeight(h:Number):Void;&#xD;&#xA;   [Inspectable(defaultValue=0, verbose=1, category="Size")] function get minWidth():Number;&#xD;&#xA;   function set minWidth(w:Number):Void;&#xD;&#xA;   public function move(x:Number, y:Number, noEvent:Boolean):Void;&#xD;&#xA;   public var notifyStyleChangeInChildren:Function;&#xD;&#xA;   public function redraw(bAlways:Boolean):Void;&#xD;&#xA;   public var removeEventListener:Function;&#xD;&#xA;   function get right():Number;&#xD;&#xA;   function get scaleX():Number;&#xD;&#xA;   function set scaleX(x:Number):Void;&#xD;&#xA;   function get scaleY():Number;&#xD;&#xA;   function set scaleY(y:Number):Void;&#xD;&#xA;   public function setColor(color:Number):Void;&#xD;&#xA;   public function setMinHeight(h:Number):Void;&#xD;&#xA;   public function setMinWidth(w:Number):Void;&#xD;&#xA;   public function setSize(w:Number, h:Number, noEvent:Boolean):Void;&#xD;&#xA;   public function setSkin(tag:Number, linkageName:String, initObj:Object):MovieClip;&#xD;&#xA;   public var setStyle:Function;&#xD;&#xA;   public function setVisible(x:Boolean, noEvent:Boolean):Void;&#xD;&#xA;   public function size(Void):Void;&#xD;&#xA;   public var styleName:String;&#xD;&#xA;   public var stylecache:Object;&#xD;&#xA;   static var symbolName:String;&#xD;&#xA;   static var symbolOwner:Object;&#xD;&#xA;   public var tabEnabled:Boolean;&#xD;&#xA;   public var textAlign:String;&#xD;&#xA;   static var textColorList;&#xD;&#xA;   public var textDecoration:String;&#xD;&#xA;   public var textIndent:Number;&#xD;&#xA;   private var tfList:Object;&#xD;&#xA;   function get top():Number;&#xD;&#xA;   public var validateNow:Boolean;&#xD;&#xA;   static var version:String;&#xD;&#xA;   [Inspectable(defaultValue=true, verbose=1, category="Other")] function get visible():Boolean;&#xD;&#xA;   function set visible(x:Boolean):Void;&#xD;&#xA;   function get width():Number;&#xD;&#xA;   function get x():Number;&#xD;&#xA;   function get y():Number;&#xD;&#xA;};&#xD;&#xA;'>
                                   <includesList>
                                        <IncludesItem name="__Packages.mx.skins.SkinElement" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="__Packages.mx.styles.CSSStyleDeclaration" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="__Packages.mx.styles.StyleManager" implementation="ProgressBar.swf"/>
                                   </includesList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="__Packages.mx.core.ext.UIComponentExtensions">
                              <SwcItem name="__Packages.mx.core.ext.UIComponentExtensions" implementation="ProgressBar.swf" version="1164217985" isTopLevel="true" intrinsicClass="mx.core.ext.UIComponentExtensions" intrinsicScript="import mx.core.UIComponent;&#xD;&#xA;&#xD;&#xA;intrinsic class mx.core.ext.UIComponentExtensions&#xD;&#xA;{&#xD;&#xA;   static function Extensions():Boolean;&#xD;&#xA;   static var FocusManagerDependency;&#xD;&#xA;   static var OverlappedWindowsDependency;&#xD;&#xA;   static var UIComponentDependency;&#xD;&#xA;   static var UIComponentExtended;&#xD;&#xA;   static var bExtended;&#xD;&#xA;};&#xD;&#xA;">
                                   <includesList>
                                        <IncludesItem name="__Packages.mx.styles.CSSSetStyle" implementation="ProgressBar.swf"/>
                                   </includesList>
                                   <exportAfterList>
                                        <ExportAfterItem name="__Packages.mx.core.UIComponent" implementation="ProgressBar.swf"/>
                                        <ExportAfterItem name="__Packages.mx.managers.FocusManager" implementation="ProgressBar.swf"/>
                                        <ExportAfterItem name="__Packages.mx.managers.OverlappedWindows" implementation="ProgressBar.swf"/>
                                   </exportAfterList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="__Packages.mx.core.ext.UIObjectExtensions">
                              <SwcItem name="__Packages.mx.core.ext.UIObjectExtensions" implementation="ProgressBar.swf" version="1164217985" isTopLevel="true" intrinsicClass="mx.core.ext.UIObjectExtensions" intrinsicScript="import mx.core.UIObject;&#xD;&#xA;import mx.styles.CSSStyleDeclaration;&#xD;&#xA;import mx.skins.SkinElement;&#xD;&#xA;import mx.events.UIEventDispatcher;&#xD;&#xA;&#xD;&#xA;intrinsic class mx.core.ext.UIObjectExtensions&#xD;&#xA;{&#xD;&#xA;   static var CSSTextStylesDependency;&#xD;&#xA;   static function Extensions():Boolean;&#xD;&#xA;   static var SkinElementDependency;&#xD;&#xA;   static var UIEventDispatcherDependency;&#xD;&#xA;   static var UIObjectDependency;&#xD;&#xA;   static var UIObjectExtended;&#xD;&#xA;   static function addGeometry(tf:Object, ui:Object):Void;&#xD;&#xA;   static var bExtended;&#xD;&#xA;};&#xD;&#xA;">
                                   <includesList>
                                        <IncludesItem name="__Packages.mx.skins.ColoredSkinElement" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="__Packages.mx.styles.CSSStyleDeclaration" implementation="ProgressBar.swf"/>
                                   </includesList>
                                   <exportAfterList>
                                        <ExportAfterItem name="__Packages.mx.core.UIObject" implementation="ProgressBar.swf"/>
                                        <ExportAfterItem name="__Packages.mx.skins.SkinElement" implementation="ProgressBar.swf"/>
                                        <ExportAfterItem name="__Packages.mx.styles.CSSTextStyles" implementation="ProgressBar.swf"/>
                                        <ExportAfterItem name="__Packages.mx.events.UIEventDispatcher" implementation="ProgressBar.swf"/>
                                   </exportAfterList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="__Packages.mx.events.EventDispatcher">
                              <SwcItem name="__Packages.mx.events.EventDispatcher" implementation="ProgressBar.swf" version="1164217985" isTopLevel="true" intrinsicClass="mx.events.EventDispatcher" intrinsicScript="&#xD;&#xA;intrinsic class mx.events.EventDispatcher&#xD;&#xA;{&#xD;&#xA;   static var _fEventDispatcher:mx.events.EventDispatcher;&#xD;&#xA;   static function _removeEventListener(queue:Object, event:String, handler):Void;&#xD;&#xA;   public function addEventListener(event:String, handler):Void;&#xD;&#xA;   public function dispatchEvent(eventObj:Object):Void;&#xD;&#xA;   public function dispatchQueue(queueObj:Object, eventObj:Object):Void;&#xD;&#xA;   static var exceptions:Object;&#xD;&#xA;   static function initialize(object:Object):Void;&#xD;&#xA;   public function removeEventListener(event:String, handler):Void;&#xD;&#xA;};&#xD;&#xA;"/>
                         </AssetMapItem>
                         <AssetMapItem key="__Packages.mx.events.UIEventDispatcher">
                              <SwcItem name="__Packages.mx.events.UIEventDispatcher" implementation="ProgressBar.swf" version="1164217986" isTopLevel="true" intrinsicClass="mx.events.UIEventDispatcher" intrinsicScript="import mx.core.UIObject;&#xD;&#xA;import mx.events.EventDispatcher;&#xD;&#xA;&#xD;&#xA;intrinsic class mx.events.UIEventDispatcher extends mx.events.EventDispatcher&#xD;&#xA;{&#xD;&#xA;   public function __addEventListener(event:String, handler):Void;&#xD;&#xA;   public var __origAddEventListener:Function;&#xD;&#xA;   public var __sentLoadEvent;&#xD;&#xA;   static var _fEventDispatcher:mx.events.UIEventDispatcher;&#xD;&#xA;   static function addKeyEvents(obj:Object):Void;&#xD;&#xA;   static function addLoadEvents(obj:Object):Void;&#xD;&#xA;   public function dispatchEvent(eventObj:Object):Void;&#xD;&#xA;   static function initialize(obj:Object):Void;&#xD;&#xA;   static var keyEvents:Object;&#xD;&#xA;   static var loadEvents:Object;&#xD;&#xA;   static var lowLevelEvents:Object;&#xD;&#xA;   public function onKeyDown(Void):Void;&#xD;&#xA;   public function onKeyUp(Void):Void;&#xD;&#xA;   public function onLoad(Void):Void;&#xD;&#xA;   public function onUnload(Void):Void;&#xD;&#xA;   public var owner:Object;&#xD;&#xA;   public function removeEventListener(event:String, handler):Void;&#xD;&#xA;   static function removeKeyEvents(obj:Object):Void;&#xD;&#xA;   static function removeLoadEvents(obj:Object):Void;&#xD;&#xA;};&#xD;&#xA;">
                                   <exportAfterList>
                                        <ExportAfterItem name="__Packages.mx.events.EventDispatcher" implementation="ProgressBar.swf"/>
                                   </exportAfterList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="__Packages.mx.managers.DepthManager">
                              <SwcItem name="__Packages.mx.managers.DepthManager" implementation="ProgressBar.swf" version="1164217986" isTopLevel="true" intrinsicClass="mx.managers.DepthManager" intrinsicScript="import mx.core.UIObject;&#xD;&#xA;&#xD;&#xA;intrinsic class mx.managers.DepthManager&#xD;&#xA;{&#xD;&#xA;   public function DepthManager();&#xD;&#xA;   static var __depthManager:mx.managers.DepthManager;&#xD;&#xA;   public var _childCounter:Number;&#xD;&#xA;   public var _parent:MovieClip;&#xD;&#xA;   public var _topmost:Boolean;&#xD;&#xA;   public function buildDepthTable(Void):Array;&#xD;&#xA;   public function createChildAtDepth(linkageName:String, depthFlag:Number, initObj:Object):MovieClip;&#xD;&#xA;   public function createClassChildAtDepth(className:Function, depthFlag:Number, initObj:Object):mx.core.UIObject;&#xD;&#xA;   public var createClassObject:Function;&#xD;&#xA;   static function createClassObjectAtDepth(className:Object, depthSpace:Number, initObj:Object):mx.core.UIObject;&#xD;&#xA;   public var createObject:Function;&#xD;&#xA;   static function createObjectAtDepth(linkageName:String, depthSpace:Number, initObj:Object):MovieClip;&#xD;&#xA;   public function findNextAvailableDepth(targetDepth:Number, depthTable:Array, direction:String):Number;&#xD;&#xA;   public var getDepth:Function;&#xD;&#xA;   public function getDepthByFlag(depthFlag:Number, depthTable:Array):Number;&#xD;&#xA;   static var highestDepth:Number;&#xD;&#xA;   static private var holder:MovieClip;&#xD;&#xA;   static var kBottom:Number;&#xD;&#xA;   static var kCursor:Number;&#xD;&#xA;   static var kNotopmost:Number;&#xD;&#xA;   static var kTooltip:Number;&#xD;&#xA;   static var kTop:Number;&#xD;&#xA;   static var kTopmost:Number;&#xD;&#xA;   static var lowestDepth:Number;&#xD;&#xA;   static var numberOfAuthortimeLayers:Number;&#xD;&#xA;   static var reservedDepth:Number;&#xD;&#xA;   public function setDepthAbove(targetInstance:MovieClip):Void;&#xD;&#xA;   public function setDepthBelow(targetInstance:MovieClip):Void;&#xD;&#xA;   public function setDepthTo(depthFlag:Number):Void;&#xD;&#xA;   public function shuffleDepths(subject:MovieClip, targetDepth:Number, depthTable:Array, direction:String):Void;&#xD;&#xA;   static function sortFunction(a:MovieClip, b:MovieClip):Number;&#xD;&#xA;   public var swapDepths:Function;&#xD;&#xA;   static function test(depth:Number):Boolean;&#xD;&#xA;};&#xD;&#xA;">
                                   <includesList>
                                        <IncludesItem name="__Packages.mx.core.UIObject" implementation="ProgressBar.swf"/>
                                   </includesList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="__Packages.mx.managers.FocusManager">
                              <SwcItem name="__Packages.mx.managers.FocusManager" implementation="ProgressBar.swf" version="1164217986" isTopLevel="true" intrinsicClass="mx.managers.FocusManager" intrinsicScript="import mx.core.UIObject;&#xD;&#xA;import mx.managers.SystemManager;&#xD;&#xA;import mx.controls.SimpleButton;&#xD;&#xA;import mx.core.UIComponent;&#xD;&#xA;&#xD;&#xA;intrinsic class mx.managers.FocusManager extends mx.core.UIComponent&#xD;&#xA;{&#xD;&#xA;   public function FocusManager();&#xD;&#xA;   static var UIObjectExtensionsDependency;&#xD;&#xA;   public var __defaultPushButton:mx.controls.SimpleButton;&#xD;&#xA;   private var _firstNode:Object;&#xD;&#xA;   private var _firstObj:Object;&#xD;&#xA;   private var _foundList:Object;&#xD;&#xA;   private var _lastNode:Object;&#xD;&#xA;   private var _lastObj:Object;&#xD;&#xA;   private var _lastTarget:Object;&#xD;&#xA;   private var _lastx:Object;&#xD;&#xA;   private var _needPrev:Boolean;&#xD;&#xA;   private var _nextIsNext:Boolean;&#xD;&#xA;   private var _nextNode:Object;&#xD;&#xA;   private var _nextObj:Object;&#xD;&#xA;   public function _onMouseDown(Void):Void;&#xD;&#xA;   private var _prevNode:Object;&#xD;&#xA;   private var _prevObj:Object;&#xD;&#xA;   private var _searchKey:Number;&#xD;&#xA;   public function activate(Void):Void;&#xD;&#xA;   private var activated:Boolean;&#xD;&#xA;   public var bDrawFocus:Boolean;&#xD;&#xA;   public var bNeedFocus:Boolean;&#xD;&#xA;   public var className:String;&#xD;&#xA;   public function deactivate(Void):Void;&#xD;&#xA;   public var defPushButton:mx.controls.SimpleButton;&#xD;&#xA;   function get defaultPushButton():mx.controls.SimpleButton;&#xD;&#xA;   function set defaultPushButton(x:mx.controls.SimpleButton);&#xD;&#xA;   public var defaultPushButtonEnabled:Boolean;&#xD;&#xA;   static function enableFocusManagement():Void;&#xD;&#xA;   public function enabledChanged(id:String, oldValue:Boolean, newValue:Boolean):Boolean;&#xD;&#xA;   public var form;&#xD;&#xA;   public function getActualFocus(o:Object):Object;&#xD;&#xA;   public function getFocus(Void):Object;&#xD;&#xA;   public function getFocusManagerFromObject(o:Object):Object;&#xD;&#xA;   public function getMaxTabIndex(o:mx.core.UIComponent):Number;&#xD;&#xA;   public function getMousedComponentFromChildren(x:Number, y:Number, o:Object):Object;&#xD;&#xA;   public function getNextTabIndex(Void):Number;&#xD;&#xA;   public function getSelectionFocus():Object;&#xD;&#xA;   public function getTabCandidate(o:MovieClip, index:Number, groupName:String, dir:Boolean, firstChild:Boolean):Void;&#xD;&#xA;   public function getTabCandidateFromChildren(o:MovieClip, index:Number, groupName:String, dir:Boolean, firstChild:Boolean):Void;&#xD;&#xA;   public function handleEvent(e:Object);&#xD;&#xA;   public function init(Void):Void;&#xD;&#xA;   static var initialized:Boolean;&#xD;&#xA;   public function isOurFocus(o:Object):Boolean;&#xD;&#xA;   public var lastFocus:Object;&#xD;&#xA;   public var lastMouse:Object;&#xD;&#xA;   public var lastSelFocus:Object;&#xD;&#xA;   public var lastTabFocus:Object;&#xD;&#xA;   public function mouseActivate(Void):Void;&#xD;&#xA;   function get nextTabIndex():Number;&#xD;&#xA;   public function onKeyDown(Void):Void;&#xD;&#xA;   public function onMouseUp(Void):Void;&#xD;&#xA;   public function onSetFocus(o:Object, n:Object):Void;&#xD;&#xA;   public function onUnload(Void):Void;&#xD;&#xA;   public function relocate(Void):Void;&#xD;&#xA;   public function restoreFocus(Void):Void;&#xD;&#xA;   public function sendDefaultPushButtonEvent(Void):Void;&#xD;&#xA;   public function setFocus(o:Object):Void;&#xD;&#xA;   static var symbolName:String;&#xD;&#xA;   static var symbolOwner:Object;&#xD;&#xA;   private var tabCapture:MovieClip;&#xD;&#xA;   public function tabHandler(Void):Void;&#xD;&#xA;   static var version:String;&#xD;&#xA;   public function walkTree(p:MovieClip, index:Number, groupName:String, dir:Boolean, lookup:Boolean, firstChild:Boolean):Void;&#xD;&#xA;};&#xD;&#xA;">
                                   <includesList>
                                        <IncludesItem name="__Packages.mx.managers.DepthManager" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="__Packages.mx.controls.SimpleButton" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="__Packages.mx.managers.SystemManager" implementation="ProgressBar.swf"/>
                                   </includesList>
                                   <exportAfterList>
                                        <ExportAfterItem name="__Packages.mx.core.ext.UIObjectExtensions" implementation="ProgressBar.swf"/>
                                        <ExportAfterItem name="__Packages.mx.core.UIComponent" implementation="ProgressBar.swf"/>
                                   </exportAfterList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="__Packages.mx.managers.OverlappedWindows">
                              <SwcItem name="__Packages.mx.managers.OverlappedWindows" implementation="ProgressBar.swf" version="1164217986" isTopLevel="true" intrinsicClass="mx.managers.OverlappedWindows" intrinsicScript="import mx.managers.SystemManager;&#xD;&#xA;import mx.core.UIComponent;&#xD;&#xA;&#xD;&#xA;intrinsic class mx.managers.OverlappedWindows&#xD;&#xA;{&#xD;&#xA;   static var SystemManagerDependency;&#xD;&#xA;   static function __addEventListener(e:String, o:Object, l:Function):Void;&#xD;&#xA;   static function __removeEventListener(e:String, o:Object, l:Function):Void;&#xD;&#xA;   static function activate(f:MovieClip):Void;&#xD;&#xA;   static function addFocusManager(f:mx.core.UIComponent):Void;&#xD;&#xA;   static function checkIdle(Void):Void;&#xD;&#xA;   static function deactivate(f:MovieClip):Void;&#xD;&#xA;   static function enableOverlappedWindows():Void;&#xD;&#xA;   static var initialized:Boolean;&#xD;&#xA;   static function onMouseDown(Void):Void;&#xD;&#xA;   static function onMouseMove(Void):Void;&#xD;&#xA;   static function onMouseUp(Void):Void;&#xD;&#xA;   static function removeFocusManager(f:mx.core.UIComponent):Void;&#xD;&#xA;};&#xD;&#xA;">
                                   <includesList>
                                        <IncludesItem name="__Packages.mx.core.UIComponent" implementation="ProgressBar.swf"/>
                                   </includesList>
                                   <exportAfterList>
                                        <ExportAfterItem name="__Packages.mx.managers.SystemManager" implementation="ProgressBar.swf"/>
                                   </exportAfterList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="__Packages.mx.managers.SystemManager">
                              <SwcItem name="__Packages.mx.managers.SystemManager" implementation="ProgressBar.swf" version="1164217986" isTopLevel="true" intrinsicClass="mx.managers.SystemManager" intrinsicScript='import mx.events.EventDispatcher;&#xD;&#xA;import mx.core.UIComponent;&#xD;&#xA;&#xD;&#xA;[Event("idle")] &#xD;&#xA;[Event("resize")] &#xD;&#xA;intrinsic class mx.managers.SystemManager&#xD;&#xA;{&#xD;&#xA;   static var __addEventListener:Function;&#xD;&#xA;   static var __removeEventListener:Function;&#xD;&#xA;   static var __screen:Object;&#xD;&#xA;   static private var _initialized:Boolean;&#xD;&#xA;   static var _xAddEventListener:Function;&#xD;&#xA;   static var _xRemoveEventListener:Function;&#xD;&#xA;   static var activate:Function;&#xD;&#xA;   static var addEventListener:Function;&#xD;&#xA;   static function addFocusManager(f:mx.core.UIComponent):Void;&#xD;&#xA;   static var checkIdle:Function;&#xD;&#xA;   static var deactivate:Function;&#xD;&#xA;   static var dispatchEvent:Function;&#xD;&#xA;   static var form:MovieClip;&#xD;&#xA;   static var forms:Array;&#xD;&#xA;   static var idleFrames:Number;&#xD;&#xA;   static function init(Void):Void;&#xD;&#xA;   static var interval:Number;&#xD;&#xA;   static var isMouseDown;&#xD;&#xA;   static function onMouseDown(Void):Void;&#xD;&#xA;   static var onMouseMove:Function;&#xD;&#xA;   static var onMouseUp:Function;&#xD;&#xA;   static function onResize(Void):Void;&#xD;&#xA;   static var removeEventListener:Function;&#xD;&#xA;   static function removeFocusManager(f:mx.core.UIComponent):Void;&#xD;&#xA;   static function get screen():Object;&#xD;&#xA;};&#xD;&#xA;'>
                                   <includesList>
                                        <IncludesItem name="__Packages.mx.events.EventDispatcher" implementation="ProgressBar.swf"/>
                                        <IncludesItem name="__Packages.mx.core.UIComponent" implementation="ProgressBar.swf"/>
                                   </includesList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="__Packages.mx.skins.ColoredSkinElement">
                              <SwcItem name="__Packages.mx.skins.ColoredSkinElement" implementation="ProgressBar.swf" version="1164217986" isTopLevel="true" intrinsicClass="mx.skins.ColoredSkinElement" intrinsicScript="&#xD;&#xA;intrinsic class mx.skins.ColoredSkinElement&#xD;&#xA;{&#xD;&#xA;   public var _color;&#xD;&#xA;   public function draw(Void):Void;&#xD;&#xA;   public var getStyle:Function;&#xD;&#xA;   public function invalidateStyle(Void):Void;&#xD;&#xA;   static var mixins:mx.skins.ColoredSkinElement;&#xD;&#xA;   public var onEnterFrame:Function;&#xD;&#xA;   public function setColor(c:Number):Void;&#xD;&#xA;   static function setColorStyle(p:Object, colorStyle:String):Void;&#xD;&#xA;};&#xD;&#xA;"/>
                         </AssetMapItem>
                         <AssetMapItem key="__Packages.mx.skins.SkinElement">
                              <SwcItem name="__Packages.mx.skins.SkinElement" implementation="ProgressBar.swf" version="1164217986" isTopLevel="true" intrinsicClass="mx.skins.SkinElement" intrinsicScript="&#xD;&#xA;intrinsic class mx.skins.SkinElement extends MovieClip&#xD;&#xA;{&#xD;&#xA;   public function __set__visible(visible:Boolean):Void;&#xD;&#xA;   public var height:Number;&#xD;&#xA;   public function move(x:Number, y:Number):Void;&#xD;&#xA;   static function registerElement(name:String, className:Function):Void;&#xD;&#xA;   public function setSize(w:Number, h:Number):Void;&#xD;&#xA;   public var top:Number;&#xD;&#xA;   public var visible:Boolean;&#xD;&#xA;   public var width:Number;&#xD;&#xA;};&#xD;&#xA;"/>
                         </AssetMapItem>
                         <AssetMapItem key="__Packages.mx.skins.halo.Defaults">
                              <SwcItem name="__Packages.mx.skins.halo.Defaults" implementation="ProgressBar.swf" version="1164217986" isTopLevel="true" intrinsicClass="mx.skins.halo.Defaults" intrinsicScript="import mx.core.UIObject;&#xD;&#xA;import mx.core.ext.UIObjectExtensions;&#xD;&#xA;import mx.styles.CSSStyleDeclaration;&#xD;&#xA;&#xD;&#xA;intrinsic class mx.skins.halo.Defaults&#xD;&#xA;{&#xD;&#xA;   static var CSSStyleDeclarationDependency;&#xD;&#xA;   static var UIObjectDependency;&#xD;&#xA;   static var UIObjectExtensionsDependency;&#xD;&#xA;   public var beginFill:Function;&#xD;&#xA;   public var beginGradientFill:Function;&#xD;&#xA;   static function classConstruct():Boolean;&#xD;&#xA;   static var classConstructed;&#xD;&#xA;   public var curveTo:Function;&#xD;&#xA;   public function drawRoundRect(x, y, w, h, r, c, alpha, rot, gradient, ratios);&#xD;&#xA;   public var endFill:Function;&#xD;&#xA;   public var lineTo:Function;&#xD;&#xA;   public var moveTo:Function;&#xD;&#xA;   static function setThemeDefaults():Void;&#xD;&#xA;};&#xD;&#xA;">
                                   <includesList>
                                        <IncludesItem name="__Packages.mx.core.UIComponent" implementation="ProgressBar.swf"/>
                                   </includesList>
                                   <exportAfterList>
                                        <ExportAfterItem name="__Packages.mx.core.UIObject" implementation="ProgressBar.swf"/>
                                        <ExportAfterItem name="__Packages.mx.styles.CSSStyleDeclaration" implementation="ProgressBar.swf"/>
                                        <ExportAfterItem name="__Packages.mx.core.ext.UIObjectExtensions" implementation="ProgressBar.swf"/>
                                   </exportAfterList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="__Packages.mx.skins.halo.FocusRect">
                              <SwcItem name="__Packages.mx.skins.halo.FocusRect" implementation="ProgressBar.swf" version="1164217986" isTopLevel="true" intrinsicClass="mx.skins.halo.FocusRect" intrinsicScript="import mx.core.UIObject;&#xD;&#xA;import mx.skins.halo.Defaults;&#xD;&#xA;import mx.managers.DepthManager;&#xD;&#xA;import mx.skins.SkinElement;&#xD;&#xA;import mx.core.UIComponent;&#xD;&#xA;&#xD;&#xA;intrinsic class mx.skins.halo.FocusRect extends mx.skins.SkinElement&#xD;&#xA;{&#xD;&#xA;   static var DefaultsDependency:mx.skins.halo.Defaults;&#xD;&#xA;   public function FocusRect();&#xD;&#xA;   static var UIComponentDependency:mx.core.UIComponent;&#xD;&#xA;   public var boundingBox_mc:MovieClip;&#xD;&#xA;   static function classConstruct():Boolean;&#xD;&#xA;   static var classConstructed:Boolean;&#xD;&#xA;   public function draw(o:Object):Void;&#xD;&#xA;   public var drawRoundRect:Function;&#xD;&#xA;   public function handleEvent(e:Object):Void;&#xD;&#xA;   public function setSize(w:Number, h:Number, r, a:Number, rectCol:Number):Void;&#xD;&#xA;};&#xD;&#xA;">
                                   <includesList>
                                        <IncludesItem name="__Packages.mx.managers.DepthManager" implementation="ProgressBar.swf"/>
                                   </includesList>
                                   <exportAfterList>
                                        <ExportAfterItem name="__Packages.mx.skins.SkinElement" implementation="ProgressBar.swf"/>
                                        <ExportAfterItem name="__Packages.mx.core.UIComponent" implementation="ProgressBar.swf"/>
                                        <ExportAfterItem name="__Packages.mx.skins.halo.Defaults" implementation="ProgressBar.swf"/>
                                   </exportAfterList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="__Packages.mx.styles.CSSSetStyle">
                              <SwcItem name="__Packages.mx.styles.CSSSetStyle" implementation="ProgressBar.swf" version="1164217986" isTopLevel="true" intrinsicClass="mx.styles.CSSSetStyle" intrinsicScript="import mx.styles.StyleManager;&#xD;&#xA;import mx.styles.CSSStyleDeclaration;&#xD;&#xA;&#xD;&#xA;intrinsic class mx.styles.CSSSetStyle&#xD;&#xA;{&#xD;&#xA;   static var CSSStyleDeclarationDependency;&#xD;&#xA;   public var _color:Number;&#xD;&#xA;   public function _setStyle(styleProp:String, newValue):Void;&#xD;&#xA;   public function changeColorStyleInChildren(sheetName:String, colorStyle:String, newValue):Void;&#xD;&#xA;   public function changeTextStyleInChildren(styleProp:String):Void;&#xD;&#xA;   static function classConstruct():Boolean;&#xD;&#xA;   static var classConstructed:Boolean;&#xD;&#xA;   static function enableRunTimeCSS():Void;&#xD;&#xA;   public var invalidateStyle:Function;&#xD;&#xA;   public function notifyStyleChangeInChildren(sheetName:String, styleProp:String, newValue):Void;&#xD;&#xA;   public var setColor:Function;&#xD;&#xA;   public function setStyle(styleProp:String, newValue):Void;&#xD;&#xA;   public var styleName:String;&#xD;&#xA;   public var stylecache:Object;&#xD;&#xA;};&#xD;&#xA;">
                                   <includesList>
                                        <IncludesItem name="__Packages.mx.styles.StyleManager" implementation="ProgressBar.swf"/>
                                   </includesList>
                                   <exportAfterList>
                                        <ExportAfterItem name="__Packages.mx.styles.CSSStyleDeclaration" implementation="ProgressBar.swf"/>
                                   </exportAfterList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="__Packages.mx.styles.CSSStyleDeclaration">
                              <SwcItem name="__Packages.mx.styles.CSSStyleDeclaration" implementation="ProgressBar.swf" version="1164217986" isTopLevel="true" intrinsicClass="mx.styles.CSSStyleDeclaration" intrinsicScript="import mx.styles.StyleManager;&#xD;&#xA;import mx.styles.CSSTextStyles;&#xD;&#xA;&#xD;&#xA;intrinsic class mx.styles.CSSStyleDeclaration&#xD;&#xA;{&#xD;&#xA;   static var CSSTextStylesDependency;&#xD;&#xA;   public function __getTextFormat(tf:TextFormat, bAll:Boolean):Boolean;&#xD;&#xA;   public var _tf:TextFormat;&#xD;&#xA;   static function classConstruct():Boolean;&#xD;&#xA;   static var classConstructed:Boolean;&#xD;&#xA;   public var color:Number;&#xD;&#xA;   public var embedFonts:Boolean;&#xD;&#xA;   public var fontFamily:String;&#xD;&#xA;   public var fontSize:Number;&#xD;&#xA;   public var fontStyle:String;&#xD;&#xA;   public var fontWeight:String;&#xD;&#xA;   public function getStyle(styleProp:String);&#xD;&#xA;   public var marginLeft:Number;&#xD;&#xA;   public var marginRight:Number;&#xD;&#xA;   public var styleName:String;&#xD;&#xA;   public var textAlign:String;&#xD;&#xA;   public var textDecoration:String;&#xD;&#xA;   public var textIndent:Number;&#xD;&#xA;};&#xD;&#xA;">
                                   <includesList>
                                        <IncludesItem name="__Packages.mx.styles.StyleManager" implementation="ProgressBar.swf"/>
                                   </includesList>
                                   <exportAfterList>
                                        <ExportAfterItem name="__Packages.mx.styles.CSSTextStyles" implementation="ProgressBar.swf"/>
                                   </exportAfterList>
                              </SwcItem>
                         </AssetMapItem>
                         <AssetMapItem key="__Packages.mx.styles.CSSTextStyles">
                              <SwcItem name="__Packages.mx.styles.CSSTextStyles" implementation="ProgressBar.swf" version="1164217986" isTopLevel="true" intrinsicClass="mx.styles.CSSTextStyles" intrinsicScript="&#xD;&#xA;intrinsic class mx.styles.CSSTextStyles&#xD;&#xA;{&#xD;&#xA;   static function addTextStyles(o:Object, bColor:Boolean):Void;&#xD;&#xA;};&#xD;&#xA;"/>
                         </AssetMapItem>
                         <AssetMapItem key="__Packages.mx.styles.StyleManager">
                              <SwcItem name="__Packages.mx.styles.StyleManager" implementation="ProgressBar.swf" version="1164217986" isTopLevel="true" intrinsicClass="mx.styles.StyleManager" intrinsicScript="&#xD;&#xA;intrinsic class mx.styles.StyleManager&#xD;&#xA;{&#xD;&#xA;   static var TextFormatStyleProps:Object;&#xD;&#xA;   static var TextStyleMap:Object;&#xD;&#xA;   static var colorNames:Object;&#xD;&#xA;   static var colorStyles:Object;&#xD;&#xA;   static function getColorName(colorName:String):Number;&#xD;&#xA;   static var inheritingStyles:Object;&#xD;&#xA;   static function isColorName(colorName:String):Boolean;&#xD;&#xA;   static function isColorStyle(styleName:String):Boolean;&#xD;&#xA;   static function isInheritingStyle(styleName:String):Boolean;&#xD;&#xA;   static function registerColorName(colorName:String, colorValue:Number):Void;&#xD;&#xA;   static function registerColorStyle(styleName:String):Void;&#xD;&#xA;   static function registerInheritingStyle(styleName:String):Void;&#xD;&#xA;};&#xD;&#xA;"/>
                         </AssetMapItem>
                    </assetMap>
                    <includesList>
                         <IncludesItem name="BoundingBox" implementation="ProgressBar.swf"/>
                         <IncludesItem name="UIComponent" implementation="ProgressBar.swf"/>
                         <IncludesItem name="UIObject" implementation="ProgressBar.swf"/>
                         <IncludesItem name="ProgressBarAssets" implementation="ProgressBar.swf"/>
                    </includesList>
                    <exportAfterList>
                         <ExportAfterItem name="__Packages.mx.controls.ProgressBar" implementation="ProgressBar.swf"/>
                    </exportAfterList>
               </SwcItem>
          </DOMCompiledClipItem>
     </media>
     <symbols>
          <Include href="Control Clips/ModInitManager.xml" loadImmediate="false" itemID="54050f7b-000001f6" lastModified="1418528584"/>
          <Include href="Control Clips/WaitForGameMenu.xml" loadImmediate="false" itemID="54000070-0000003d" lastModified="1412999688"/>
          <Include href="Menu Clips/Background.xml" loadImmediate="false" itemID="53fd0ed0-00000037" lastModified="1438468933"/>
          <Include href="Menu Clips/Hexagon 1.xml" loadImmediate="false" itemID="536979db-0000005f" lastModified="1438397717"/>
          <Include href="Menu Clips/HexagonFlare.xml" loadImmediate="false" itemID="55bc2fb5-0000022a" lastModified="1438398114"/>
     </symbols>
     <timelines>
          <DOMTimeline name="Scene 1">
               <layers>
                    <DOMLayer name="Scripts" color="#4FFFFF" autoNamed="false" layerType="folder"/>
                    <DOMLayer name="Variables" color="#FF4F4F" parentLayerIndex="0" locked="true" current="true" isSelected="true" autoNamed="false" visible="false">
                         <frames>
                              <DOMFrame index="0" duration="4" keyMode="9728">
                                   <Actionscript>
                                        <script><![CDATA[import utils.*;

// CAC Settings
var asseturl:String = "v6_4_";
var xmlurl:String = "dialogue_wrapper_light.xml";
var gamename:String = "CrystalAlienConflict";

// Mod related
var mods:Array = new Array();
var modAssoc:Array = new Array();
var modsIndex:Array = new Array();
var gameMenuLoaded:Boolean = false;
var MAX_INIT_ATTEMPTS:Number = 100;

// Wrapper variables
var version:Version = new Version(0, 2, 21, 0);
var fwversion:String = "CAC Flash Wrapper (Light) " + version;
var flversion:String = "Flash Player " + $version;
var gameswf:String = "loader_v0_5_1_unofficial.swf"; //"v6_5_game.swf";
var progressText:String = "Loading %3%% (<SWF>) [%1/%2]";
var text:String = "";
var useConsole:Boolean = false;
if (console) {
	useConsole = true;
}
]]></script>
                                   </Actionscript>
                                   <elements/>
                              </DOMFrame>
                         </frames>
                    </DOMLayer>
                    <DOMLayer name="Functions" color="#FF4FFF" parentLayerIndex="0" locked="true" autoNamed="false" visible="false">
                         <frames>
                              <DOMFrame index="0" duration="4" keyMode="9728">
                                   <Actionscript>
                                        <script><![CDATA[import flash.external.*;
import utils.*;

function Log(msg:String):Void {
	if (useConsole) {
		var output:String = escape(msg);
		ExternalInterface.call("Log", output);
	}
	trace(msg);
}
function log(msg:String):Void {
	Log(msg);
}

function displayModInfo(name:String, desc:String, icon:String, vers:String, docs:String) {
	if (ExternalInterface.available) {
		try {
			ExternalInterface.call("displayModInfo", name, desc, icon, vers, docs);
			Log("Wrapper called displayModInfo(\"" + name + "\", \"" + desc + "\", \"" + icon + "\", \"" + vers + "\", \"" + docs + "\");");
		} catch (e:Error) {
			Log("ExternalInterface error: " + e.toString());
		}
	} else {
		Log("displayModInfo() : ExternalInterface not available.");
	}
}

// Hack: Enables unofficial loader swf to get flash version
function _getVersion() {
	return getVersion();
}

function enterFullscreen() {
	Log("enterFullscreen() requested");
	if (ExternalInterface.available) {
		try {
			ExternalInterface.call("enterFullscreen");
			Stage.scaleMode = "showAll";
			Log("Wrapper called enterFullscreen();");
		} catch (e:Error) {
			Log("ExternalInterface error: " + e.toString());
		}
	} else {
		Log("enterFullscreen() : ExternalInterface not available.");
	}
}
function exitFullscreen() {
	Log("exitFullscreen() requested");
	if (ExternalInterface.available) {
		try {
			ExternalInterface.call("exitFullscreen");
			Stage.scaleMode = "noScale";
			Log("Wrapper called exitFullscreen();");
		} catch (e:Error) {
			Log("ExternalInterface error: " + e.toString());
		}
	} else {
		Log("exitFullscreen() : ExternalInterface not available.");
	}
}

function deleteFromArray(arr:Array, key:Object, value:Object):Void {
	var found:Boolean = false;
	for (var i = 0; i < arr.length; i++) {
		if (arr[i][key] == value) {
			found = true;
			delete arr[i];
		}
	}
	if (!found) {
		trace("Key '" + key + "' matching value '" + value + "' not found.");
	}
}

function XmlNodeToArray(parent:XMLNode, node:XMLNode):Object {
	var arr:Array = new Array();
	if (parent == null) {
		arr[node.nodeName] = new Array();
		arr[node.nodeName].attributes = node.attributes;
	}
	if (node.childNodes.length == 1 && node.firstChild.nodeName == null && node.firstChild.nodeValue != null) {
		return node.firstChild.nodeValue;
	}
	for (var i in node.childNodes) {
		if (parent == null) {
			arr[node.nodeName][node.childNodes[i].nodeName] = XmlNodeToArray(node, node.childNodes[i]);
			arr[node.nodeName][node.childNodes[i].nodeName].attributes = node.childNodes[i].attributes;
		} else {
			arr[node.childNodes[i].nodeName] = XmlNodeToArray(node, node.childNodes[i]);
			arr[node.childNodes[i].nodeName].attributes = node.childNodes[i].attributes;
		}
	}
	return arr;
}

function loadXml(xmlFile:String, onLoadCallback:Function):Boolean {
	try {
		var xml:XML = new XML();
		xml.ignoreWhite = true;
		xml.load(xmlFile);
		xml.onLoad = function(success:Boolean) {
			onLoadCallback(xmlFile, success, xml);
		}
		return true;
	} catch (ex) {
		trace(ex);
		return false;
	}
}
function loadXmlAsArray(xmlFile:String, onLoadCallback:Function):Boolean {
	var onload:Function = function(xmlFile:String, success:Boolean, xml:XML) {
		if (success) {
			onLoadCallback(xmlFile, XmlNodeToArray(null, xml.firstChild));
		} else {
			onLoadCallback(xmlFile, null);
		}
	}
	return loadXml(xmlFile, onload);
}

/*
function addPostCallback(callback:Function) {
	postCallbacks.push(callback);
}

function removePostCallback(callback:Function) {
	var idx:Number = postCallbacks.indexOf(callback);
	postCallbacks = postCallbacks.slice(idx, idx);
}
*/

function isHooked():Boolean {
	return true;
}
function notHooked():Boolean {
	return false;
}

function oopsFunction():Void {
	Log("Oops... 501 internal function error.");
}

var uniques:Array = new Array();
function addHook(hookType:String, oldFunc:Function, callback:Function):Object {
	// Check the hook type being passed, make sure it's a known type.
	if (hookType !== "post" && hookType !== "pre") {
		Log("What the heck is a '" + hookType + "' hook?!?");
		return {id: null, override: oldFunc};
	}
	// Check the oldFunc and callback parameters, make sure they're functions.
	if (typeof(oldFunc) !== "function") {
		Log("You can only hook functions!");
		return {id: null, override: oldFunc};
	} else if (typeof(callback) !== "function") {
		Log("A hook callback must be a function!");
		return {id: null, override: oldFunc};
	}
	
	if (typeof(uniques[hookType]) !== "number") {
		uniques[hookType] = new Number(1);
	}
	var hookId:String = hookType + "hook" + uniques[hookType]++;
	var newOverride:Boolean = true;
	var newFunc:Function = oopsFunction;

	if (func.isHooked() === true) {
		newOverride = false;
		if (hookType === "post") {
			oldFunc.postCallbacks.push({id: hookId, callback: callback});
		} else if (hookType === "pre") {
			oldFunc.preCallbacks.push({id: hookId, callback: callback});
		}
	} else {
		oldFunc.isHooked = notHooked;
		newFunc = function() {
			//Log("A hooked function was called with arguments (" + arguments + ").");
			if (newFunc.preCallbacks.length > 0) {
				for (var __i__:Number = 0; __i__ < newFunc.preCallbacks.length; __i__++) {
					if (newFunc.preCallbacks[__i__].callback.apply(this, arguments) == "HOOK_HANDLED")
						return;
				}
			}
			newFunc.original.apply(this, arguments);
			if (newFunc.postCallbacks.length > 0) {
				for (var __i__:Number = 0; __i__ < newFunc.postCallbacks.length; __i__++) {
					newFunc.postCallbacks[__i__].callback.apply(this, arguments);
				}
			}
		}
		newFunc.original = oldFunc;
		newFunc.isHooked = isHooked;
		newFunc.preCallbacks = new Array();
		newFunc.postCallbacks = new Array();
		if (hookType === "post") {
			newFunc.postCallbacks.push({id: hookId, callback: callback});
		} else if (hookType === "pre") {
			newFunc.preCallbacks.push({id: hookId, callback: callback});
		}
	}
	
	if (hookType === "post") {
		Log("Added function post-hook '" + hookId + "'");
	} else if (hookType === "pre") {
		Log("Added function pre-hook '" + hookId + "'");
	} else {
		Log("What is this '" + hookType + "' hook type, I don't even...");
	}

	if (newOverride) {
		return {id: hookId, override: newFunc};
	} else {
		return {id: hookId, override: oldFunc};
	}
}

function addPostHook(oldFunc:Function, callback:Function):Object {
	return addHook("post", oldFunc, callback);
}
function addPreHook(oldFunc:Function, callback:Function):Object {
	return addHook("pre", oldFunc, callback);
}]]></script>
                                   </Actionscript>
                                   <elements/>
                              </DOMFrame>
                         </frames>
                    </DOMLayer>
                    <DOMLayer name="Logic" color="#4FFF4F" parentLayerIndex="0" autoNamed="false">
                         <frames>
                              <DOMFrame index="0" keyMode="9728">
                                   <Actionscript>
                                        <script><![CDATA[import flash.filters.*;
import flash.net.*;
import utils.*;

//System.security.allowDomain("*");

var newmenu:ContextMenu = new ContextMenu();
newmenu.hideBuiltInItems();
this.menu = newmenu;

_global.version = version;

Stage.scaleMode = "noScale";
fscommand("allowscale", false);
fscommand("showmenu", false);
_quality = "high";

Log("Logging Flash wrapper version: " + version + " [" + $version + "]");

var numberOfMods:Number = 0;
var numberOfModInfosLoaded:Number = 0;

// Load mod list
text += "Loading mods/modlist_light.xml...\n";
loadXmlAsArray("mods/modlist_light.xml", onModListLoaded);
function onModListLoaded(xmlFile:String, modList:Array) {
	var m:Array = modList["mods"];
	delete m["attributes"];
	var j:Number = 0;
	for (var i in m) {
		//m[i]["__moddir"] = "mods/" + i + "/";
		m[i]["__modxml"] = "mods/" + i + "/modinfo.xml";
		modAssoc[m[i]["__modxml"]] = new Array(i, j);
		loadXmlAsArray(m[i]["__modxml"], onModInfoLoaded);
		j++;
	}
	numberOfMods = j;
}
function onModInfoLoaded(xmlFile:String, modInfo:Array) {
	var m:String = modAssoc[xmlFile][0];
	var i:Number = modAssoc[xmlFile][1];
	modsIndex.push(m);
	//var i:Number = modsIndex.push(m);
	mods[m] = modInfo["mod"];
	mods[m]["__initialized"] = false;
	
	var swfurl = "mods/" + m + "/" + mods[m]["swf"];
	mods[m]["__url"] = swfurl;
	mods[m]["__level"] = i + 100;
	mods[m]["__modxml"] = xmlFile;
	mods[m]["__initattempts"] = 0;
	mods[m]["__enabled"] = true;
	mods[m]["__priority"] = i;
	mods[m]["__modname"] = m;
/*
	var modPrioritySorted:Array = new Array();
	for (var mod in mods) {
		modPrioritySorted[mods[mod]["__priority"]] = mods[mod];
	}
	mods = new Array();
	for (var k:Number = modsIndex.length - 1; k >= 0; k--) {
		mods[modPrioritySorted[k]["__modname"]] = modPrioritySorted[k];
	}
*/
	Log("Loaded mod info for: " + mods[m]["name"] + " v" + mods[m]["version"]);
	text += "Loaded mod info for: " + mods[m]["name"] + " v" + mods[m]["version"] + "\n";
	
	numberOfModInfosLoaded++;
	
	if (numberOfModInfosLoaded == numberOfMods) {
		gotoAndPlay(2);
	}
}

stop();]]></script>
                                   </Actionscript>
                                   <elements/>
                              </DOMFrame>
                              <DOMFrame index="1" keyMode="9728">
                                   <Actionscript>
                                        <script><![CDATA[import mx.controls.*;
import utils.*;
stop();

// Set up controls...
progress.setStyle("color",0xFFFFFF);
//progress.setStyle("embedFonts",true);
//progress.setStyle("fontFamily","Consolas");
progress.setStyle("fontFamily","_typewriter");
progress.setStyle("fontSize",14);
progress.text = progressText;
overall.setStyle("color",0xFFFFFF);
//overall.setStyle("embedFonts",true);
//overall.setStyle("fontFamily","Consolas");
overall.setStyle("fontFamily","_typewriter");
overall.setStyle("fontSize",14);

var modCount:Number = modsIndex.length;
var loadCount:Number = 0;
var loadFile:String = "";
var sandbox:MovieClip;
var mcLoader:MovieClipLoader = new MovieClipLoader();

var totalBytesLoaded:Number = 0;
var totalBytesTotal:Number = 6629816;
var previousBytesLoaded:Number = 0;

Log("Listing mods:");
for (var i in mods) {
	Log(" - " + i + " v" + mods[i]["version"] + " Enabled: " + mods[i]["__enabled"]);
}

Log("Ordering mods by priority...");
var modPrioritySorted:Array = new Array();
for (var mod in mods) {
	modPrioritySorted[mods[mod]["__priority"]] = mods[mod];
}
mods = new Array();
for (var k:Number = modsIndex.length - 1; k >= 0; k--) {
	mods[modPrioritySorted[k]["__modname"]] = modPrioritySorted[k];
}

Log("Listing mods:");
for (var i in mods) {
	Log(" - " + i + " v" + mods[i]["version"] + " Enabled: " + mods[i]["__enabled"]);
}

function onLoadProgress(mc:MovieClip, bytesLoaded:Number, bytesTotal:Number):Void {
	//trace(mc + ".onLoadProgress with " + bytesLoaded + " bytes of " + bytesTotal);
	progress.setProgress(bytesLoaded,bytesTotal);
	totalBytesLoaded += bytesLoaded - previousBytesLoaded;
	previousBytesLoaded = bytesLoaded;
	overall.setProgress(totalBytesLoaded,totalBytesTotal);
}
function onLoadInit(mc:MovieClip):Void {
	previousBytesLoaded = 0;
	mc.stop();
	loadCount++;
	//trace(mc + ".onLoadInit");
	Log(loadFile + " preloaded.");
	text += "OK!\n";//"Loaded: " + loadFile + "\n";
	unloadMovie(sandbox);
	sandbox.unloadMovie();
	removeMovieClip(sandbox);
	sandbox.removeMovieClip();
	if (!loadNext()) {
		delete sandbox;
		text += "Preloading done!\n";
		gotoAndStop(3);
	}
}
function onLoadError(mc:MovieClip, err:String, http:Number):Void {
	previousBytesLoaded = 0;
	mc.stop();
	loadCount++;
	trace(mc + ".onLoadError");
	Log(loadFile + " failed to load. [" + http + "|" + err + "]");
	text += "FAIL!\n";
	removeMovieClip(sandbox);
	if (!loadNext()) {
		// TODO:
		Log("Houston, we have a problem...");
	}
}
mcLoader.addListener(this);
function startLoad() {
	loadNext();
}
function loadNext():Boolean {
	var load:Boolean = false;
	var skip:Boolean = false;
	if (loadCount > modCount) {
		load = false;
	} else if (modCount == loadCount) {
		loadFile = gameswf;
		load = true;
	} else {
		if (mods[modsIndex[loadCount]]["__enabled"]) {
			loadFile = "mods/" + modsIndex[loadCount] + "/" + mods[modsIndex[loadCount]]["swf"];
			load = true;
		} else {
			loadCount++;
			skip = true;
			load = loadNext();
		}
	}
	if (load && !skip) {
		loadCurrent();
	}
	return load;
}
function loadCurrent() {
	sandbox = createEmptyMovieClip("sandbox", getNextHighestDepth());
	sandbox._visible = false;
	sandbox._lockroot = true;
	sandbox.enabled = false;
	sandbox._alpha = 0;
	sandbox._x = -1;
	sandbox._y = -1;
	sandbox._width = 0;
	sandbox._height = 0;

	text += "Loading " + loadFile + " ... ";
	progress.setProgress(0,1);
	progress.label = progressText.split("<SWF>").join(loadFile);
	mcLoader.loadClip(loadFile,sandbox);
}

// Start loading files.
startLoad();]]></script>
                                   </Actionscript>
                                   <elements/>
                              </DOMFrame>
                              <DOMFrame index="2" keyMode="9728">
                                   <Actionscript>
                                        <script><![CDATA[
text += "Loading in mods...\n";

for (var j in mods) {
	if (mods[j]["__enabled"]) {
		loadMovieNum(mods[j]["__url"], mods[j]["__level"]);
		displayModInfo(mods[j]["name"], mods[j]["description"], mods[j]["icon"], mods[j]["version"], mods[j]["documentation"]);
	}
}

text += "Waiting for mods to initialize...\n";

function AllModsInitializedCallback() {
	text += "Mod initialization done, starting the game!\n";
	Log("AllModsInitializedCallback(); called.");
	loadMovieNum(gameswf, 2); // Hack: Should be 1, but this is for the loader to work!
	_root._visible = false;
	gotoAndStop(4);
}

stop();]]></script>
                                   </Actionscript>
                                   <elements>
                                        <DOMSymbolInstance libraryItemName="Control Clips/ModInitManager" name="queueManager">
                                             <matrix>
                                                  <Matrix tx="600" ty="390"/>
                                             </matrix>
                                             <transformationPoint>
                                                  <Point/>
                                             </transformationPoint>
                                        </DOMSymbolInstance>
                                   </elements>
                              </DOMFrame>
                              <DOMFrame index="3" keyMode="9728">
                                   <Actionscript>
                                        <script><![CDATA[stop();]]></script>
                                   </Actionscript>
                                   <elements/>
                              </DOMFrame>
                         </frames>
                    </DOMLayer>
                    <DOMLayer name="WaitForGameMenu" color="#4FFF4F" parentLayerIndex="0" autoNamed="false">
                         <frames>
                              <DOMFrame index="0" duration="2" keyMode="9728">
                                   <elements/>
                              </DOMFrame>
                              <DOMFrame index="2" duration="2" keyMode="9728">
                                   <elements>
                                        <DOMSymbolInstance libraryItemName="Control Clips/WaitForGameMenu">
                                             <matrix>
                                                  <Matrix tx="600" ty="379"/>
                                             </matrix>
                                             <transformationPoint>
                                                  <Point/>
                                             </transformationPoint>
                                        </DOMSymbolInstance>
                                   </elements>
                              </DOMFrame>
                         </frames>
                    </DOMLayer>
                    <DOMLayer name="Design" color="#4F80FF" autoNamed="false" layerType="folder"/>
                    <DOMLayer name="Text" color="#4FFFFF" parentLayerIndex="5" locked="true" autoNamed="false">
                         <frames>
                              <DOMFrame index="0" duration="3" keyMode="9728">
                                   <elements>
                                        <DOMDynamicText name="txtLoading" selected="true" width="596" height="181" scrollable="true" variableName="text" lineType="multiline">
                                             <matrix>
                                                  <Matrix tx="2" ty="2"/>
                                             </matrix>
                                             <textRuns>
                                                  <DOMTextRun>
                                                       <characters></characters>
                                                       <textAttrs>
                                                            <DOMTextAttrs aliasText="false" lineSpacing="-1" bitmapSize="240" face="_typewriter" fillColor="#FFFFFF"/>
                                                       </textAttrs>
                                                  </DOMTextRun>
                                             </textRuns>
                                             <filters>
                                                  <GlowFilter blurX="10" blurY="10" color="#000000" quality="3" strength="2"/>
                                             </filters>
                                        </DOMDynamicText>
                                        <DOMDynamicText name="txtVersion" selected="true" fontRenderingMode="device" left="104.45" width="297.05" height="19.75" variableName="fwversion">
                                             <matrix>
                                                  <Matrix tx="196.5" ty="367"/>
                                             </matrix>
                                             <textRuns>
                                                  <DOMTextRun>
                                                       <characters>&lt;version goes here&gt;</characters>
                                                       <textAttrs>
                                                            <DOMTextAttrs alignment="right" aliasText="false" size="14" bitmapSize="280" face="Arial-Black" fillColor="#FFFFFF"/>
                                                       </textAttrs>
                                                  </DOMTextRun>
                                             </textRuns>
                                             <filters>
                                                  <GlowFilter color="#00FF00" quality="3"/>
                                             </filters>
                                        </DOMDynamicText>
                                        <DOMDynamicText selected="true" fontRenderingMode="device" width="296.95" height="14.1" variableName="flversion">
                                             <matrix>
                                                  <Matrix tx="301.05" ty="383.9"/>
                                             </matrix>
                                             <textRuns>
                                                  <DOMTextRun>
                                                       <characters>$version</characters>
                                                       <textAttrs>
                                                            <DOMTextAttrs alignment="right" aliasText="false" size="10" bitmapSize="200" face="Arial-Black" fillColor="#FFFFFF"/>
                                                       </textAttrs>
                                                  </DOMTextRun>
                                             </textRuns>
                                             <filters>
                                                  <GlowFilter color="#0000FF" quality="3"/>
                                             </filters>
                                        </DOMDynamicText>
                                   </elements>
                              </DOMFrame>
                              <DOMFrame index="3" keyMode="9728">
                                   <elements/>
                              </DOMFrame>
                         </frames>
                    </DOMLayer>
                    <DOMLayer name="Controls" color="#4F80FF" parentLayerIndex="5" locked="true" autoNamed="false">
                         <frames>
                              <DOMFrame index="0" keyMode="9728">
                                   <elements/>
                              </DOMFrame>
                              <DOMFrame index="1" keyMode="9728">
                                   <elements>
                                        <DOMCompiledClipInstance libraryItemName="Components/ProgressBar" name="progress" uniqueID="7">
                                             <matrix>
                                                  <Matrix a="3.00018310546875" tx="75" ty="215"/>
                                             </matrix>
                                             <dataBindingXML><![CDATA[<component metaDataEdited='true' metaDataFetched='true' schemaUrl='' schemaOperation='' sceneRootLabel='Scene 1' oldCopiedComponentPath='7'>
	<eventMap>
		<property name="percentComplete" value="progress" />
		<property name="value" value="progress" />
	</eventMap>
	<property name="percentComplete">
<schema name="Number" base="Number" class="mx.data.types.Num" required="true" readonly="true" writeonly="false" category="simple" original="true">
			<properties>
				<property name="defaultLabel" value="" />
				<property name="defaultUIControl" value="" />
				<property name="maxValue" value="" />
				<property name="minValue" value="" />
			</properties>
		</schema>
	</property>
	<property name="value">
<schema name="Number" base="Number" class="mx.data.types.Num" required="true" readonly="true" writeonly="false" category="simple" original="true">
			<properties>
				<property name="defaultLabel" value="" />
				<property name="defaultUIControl" value="" />
				<property name="maxValue" value="" />
				<property name="minValue" value="" />
			</properties>
		</schema>
	</property>
</component>
]]></dataBindingXML>
                                             <parametersAsXML><![CDATA[   <property id="conversion">
      <Inspectable name="conversion" variable="conversion" category="" verbose="0" defaultValue="1" type="Default"/>
   </property>
   <property id="direction">
      <Inspectable name="direction" variable="direction" category="" verbose="0" defaultValue="right" enumeration="left,right" type="List"/>
   </property>
   <property id="label">
      <Inspectable name="label" variable="label" category="" verbose="0" defaultValue="Loading %3%% (&lt;SWF&gt;) [%1/%2]" type="Default"/>
   </property>
   <property id="labelPlacement">
      <Inspectable name="labelPlacement" variable="labelPlacement" category="" verbose="0" defaultValue="bottom" enumeration="left,right,top,bottom,center" type="List"/>
   </property>
   <property id="mode">
      <Inspectable name="mode" variable="mode" category="" verbose="0" defaultValue="manual" enumeration="event,polled,manual" type="List"/>
   </property>
   <property id="source">
      <Inspectable name="source" variable="source" category="" verbose="0" defaultValue="" type="Default"/>
   </property>
   <property id="visible">
      <Inspectable name="visible" variable="visible" category="Other" verbose="1" defaultValue="true" type="Boolean"/>
   </property>
   <property id="minHeight">
      <Inspectable name="minHeight" variable="minHeight" category="Size" verbose="1" defaultValue="0" type="Number"/>
   </property>
   <property id="minWidth">
      <Inspectable name="minWidth" variable="minWidth" category="Size" verbose="1" defaultValue="0" type="Number"/>
   </property>
]]></parametersAsXML>
                                        </DOMCompiledClipInstance>
                                        <DOMCompiledClipInstance libraryItemName="Components/ProgressBar" name="overall" uniqueID="31">
                                             <matrix>
                                                  <Matrix a="3.00018310546875" tx="75" ty="185"/>
                                             </matrix>
                                             <dataBindingXML><![CDATA[<component metaDataEdited='true' metaDataFetched='true' schemaUrl='' schemaOperation='' sceneRootLabel='Scene 1' oldCopiedComponentPath='31'>
	<eventMap>
		<property name="percentComplete" value="progress" />
		<property name="value" value="progress" />
	</eventMap>
	<property name="percentComplete">
<schema name="Number" base="Number" class="mx.data.types.Num" required="true" readonly="true" writeonly="false" category="simple" original="true">
			<properties>
				<property name="defaultLabel" value="" />
				<property name="defaultUIControl" value="" />
				<property name="maxValue" value="" />
				<property name="minValue" value="" />
			</properties>
		</schema>
	</property>
	<property name="value">
<schema name="Number" base="Number" class="mx.data.types.Num" required="true" readonly="true" writeonly="false" category="simple" original="true">
			<properties>
				<property name="defaultLabel" value="" />
				<property name="defaultUIControl" value="" />
				<property name="maxValue" value="" />
				<property name="minValue" value="" />
			</properties>
		</schema>
	</property>
</component>
]]></dataBindingXML>
                                             <parametersAsXML><![CDATA[   <property id="conversion">
      <Inspectable name="conversion" variable="conversion" category="" verbose="0" defaultValue="1" type="Default"/>
   </property>
   <property id="direction">
      <Inspectable name="direction" variable="direction" category="" verbose="0" defaultValue="right" enumeration="left,right" type="List"/>
   </property>
   <property id="label">
      <Inspectable name="label" variable="label" category="" verbose="0" defaultValue="Overall progress %3%% [%1/%2]" type="Default"/>
   </property>
   <property id="labelPlacement">
      <Inspectable name="labelPlacement" variable="labelPlacement" category="" verbose="0" defaultValue="bottom" enumeration="left,right,top,bottom,center" type="List"/>
   </property>
   <property id="mode">
      <Inspectable name="mode" variable="mode" category="" verbose="0" defaultValue="manual" enumeration="event,polled,manual" type="List"/>
   </property>
   <property id="source">
      <Inspectable name="source" variable="source" category="" verbose="0" defaultValue="" type="Default"/>
   </property>
   <property id="visible">
      <Inspectable name="visible" variable="visible" category="Other" verbose="1" defaultValue="true" type="Boolean"/>
   </property>
   <property id="minHeight">
      <Inspectable name="minHeight" variable="minHeight" category="Size" verbose="1" defaultValue="0" type="Number"/>
   </property>
   <property id="minWidth">
      <Inspectable name="minWidth" variable="minWidth" category="Size" verbose="1" defaultValue="0" type="Number"/>
   </property>
]]></parametersAsXML>
                                        </DOMCompiledClipInstance>
                                   </elements>
                              </DOMFrame>
                              <DOMFrame index="2" keyMode="9728">
                                   <elements/>
                              </DOMFrame>
                              <DOMFrame index="3" keyMode="9728">
                                   <elements/>
                              </DOMFrame>
                         </frames>
                    </DOMLayer>
                    <DOMLayer name="Background" color="#FF4FFF" parentLayerIndex="5" autoNamed="false">
                         <frames>
                              <DOMFrame index="0" duration="3" keyMode="9728">
                                   <elements>
                                        <DOMSymbolInstance libraryItemName="Menu Clips/Background" centerPoint3DX="300" centerPoint3DY="200">
                                             <matrix>
                                                  <Matrix a="0.75" d="0.75" tx="300" ty="200"/>
                                             </matrix>
                                             <transformationPoint>
                                                  <Point/>
                                             </transformationPoint>
                                        </DOMSymbolInstance>
                                   </elements>
                              </DOMFrame>
                         </frames>
                    </DOMLayer>
               </layers>
          </DOMTimeline>
     </timelines>
     <persistentData>
          <PD n="DebugMovieChecked" v="FlashPro"/>
          <PD n="TestMovieChecked" v="FlashPro"/>
     </persistentData>
     <PrinterSettings/>
     <publishHistory>
          <PublishItem publishSize="34211" publishTime="1496789590"/>
          <PublishItem publishSize="34209" publishTime="1496789562"/>
          <PublishItem publishSize="34203" publishTime="1496789430"/>
          <PublishItem publishSize="34198" publishTime="1496789168"/>
          <PublishItem publishSize="34207" publishTime="1495940707"/>
          <PublishItem publishSize="34206" publishTime="1495940573"/>
          <PublishItem publishSize="34202" publishTime="1495937143"/>
          <PublishItem publishSize="34200" publishTime="1495932279"/>
          <PublishItem publishSize="34181" publishTime="1495932103"/>
          <PublishItem publishSize="34189" publishTime="1495931961"/>
          <PublishItem publishSize="34188" publishTime="1495602761"/>
          <PublishItem publishSize="34149" publishTime="1495602512"/>
          <PublishItem publishSize="34151" publishTime="1495602389"/>
          <PublishItem publishSize="34136" publishTime="1495601087"/>
          <PublishItem publishSize="34137" publishTime="1495600885"/>
          <PublishItem publishSize="34138" publishTime="1495598282"/>
          <PublishItem publishSize="34140" publishTime="1495597510"/>
          <PublishItem publishSize="34138" publishTime="1495597418"/>
          <PublishItem publishSize="34127" publishTime="1495597350"/>
          <PublishItem publishSize="34127" publishTime="1495597264"/>
     </publishHistory>
</DOMDocument>