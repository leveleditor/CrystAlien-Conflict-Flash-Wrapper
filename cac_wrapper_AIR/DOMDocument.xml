<DOMDocument xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" width="600" frameRate="23" currentTimeline="1" xflVersion="2.1" creatorInfo="Adobe Flash Professional CS5.5" platform="Windows" versionInfo="Saved by Adobe Flash Windows 11.5 build 349" majorVersion="11" minorVersion="5" buildNumber="349" breakPointCount="4294967295" viewAngle3D="59.1837342884091" nextSceneIdentifier="2" playOptionsPlayLoop="false" playOptionsPlayPages="false" playOptionsPlayFrameActions="false" autoSaveEnabled="true" autoSaveIntervalMinutes="1">
     <timelines>
          <DOMTimeline name="Scene 1">
               <layers>
                    <DOMLayer name="Layer 1" color="#4FFF4F" current="true" isSelected="true">
                         <frames>
                              <DOMFrame index="0" keyMode="9728">
                                   <Actionscript>
                                        <script><![CDATA[import flash.desktop.NativeApplication;
import flash.display.NativeWindow;
import flash.display.StageScaleMode;
import flash.display.StageAlign;
import flash.geom.Point;
import flash.events.InvokeEvent;
import flash.filesystem.File;
import flash.html.HTMLLoader;
import flash.utils.ByteArray;
import mx.utils.Base64Decoder;
import flash.events.Event;

stage.scaleMode = StageScaleMode.NO_SCALE;
stage.align = StageAlign.TOP_LEFT;

var levelFile:File = null;
var isLoadingLevel:Boolean = false;
var levelDataJson:String = null;
var shouldAutoPlay:Boolean = true;
var shouldSkipMenu:Boolean = true;
var showConsole:Boolean = false;
var windowSize:Point = new Point(stage.stageWidth, stage.stageHeight);
var htmlSize:Point = windowSize;
var wrapperLoader:HTMLLoader = new HTMLLoader();
addChild(wrapperLoader);

// Get OS window border sizes for sizing correction
var borderSize:Point = new Point(stage.nativeWindow.width - stage.stageWidth, stage.nativeWindow.height - stage.stageHeight);

function setWindowSize(size:Point):void {
	if (stage && stage.nativeWindow) {
		var newSize:Point = new Point(size.x + borderSize.x, size.y + borderSize.y);
		
		stage.nativeWindow.minSize = newSize;
		
		if (showConsole) {
			stage.nativeWindow.maxSize = new Point(newSize.x, newSize.y + 400);
		} else {
			stage.nativeWindow.maxSize = newSize;
		}
		
		stage.nativeWindow.width = newSize.x;
		stage.nativeWindow.height = newSize.y;
	}
}

setWindowSize(windowSize);

function onLoadLevel(e:Event):void {
	var bytes:ByteArray = levelFile.data;
	levelDataJson = bytes.readUTFBytes(bytes.length);
	proceed();
}

function processCommandLineArg(args:Array, index:Number):void {
	trace("Processing command line arg: " + args[index]);
	switch (args[index]) {
		case "-loadlevel":
			// Deprecated: This option should no longer be used.
			// Loading levels via Base64 strings on command line was a bad idea,
			// as it easily exceeded the maximum command length for larger levels.
			// This option remains here for now to provide backwards compatibility
			// with older versions of CAMM that used it.
			var decoder:Base64Decoder = new Base64Decoder();
			decoder.decode(args[index + 1]);
			var bytes:ByteArray = decoder.toByteArray();
			levelDataJson = bytes.toString();
			break;
		case "-cammfile":
			isLoadingLevel = true;
			var fileName = args[index + 1];
			levelFile = new File(fileName);
			levelFile.addEventListener(Event.COMPLETE, onLoadLevel);
			levelFile.load();
			break;
		case "-autoplay=no":
			shouldAutoPlay = false;
			break;
		case "-autoplay=yes":
			shouldAutoPlay = true;
			break;
		case "-skipmenu=no":
			shouldSkipMenu = false;
			break;
		case "-skipmenu=yes":
			shouldSkipMenu = true;
			break;
		case "-size":
			var windowSizeString = args[index + 1];
			var windowSizes:Array = windowSizeString.split("x", 2);
			windowSize = new Point(Number(windowSizes[0]), Number(windowSizes[1]));
			break;
		case "-console":
			showConsole = true;
			break;
		default:
			break;
	}
}

function onInvokeEvent(event:InvokeEvent):void {
	for (var i:String in event.arguments) {
		processCommandLineArg(event.arguments, Number(i));
	}
	
	if (showConsole) {
		htmlSize = new Point(windowSize.x, windowSize.y + 400);
	} else {
		htmlSize = windowSize;
	}
	
	stage.stageWidth = htmlSize.x;
	stage.stageHeight = htmlSize.y;
	
	setWindowSize(windowSize);
}

NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvokeEvent);

function onLoaded(e:Event):void {
	wrapperLoader.width = htmlSize.x;
	wrapperLoader.height = htmlSize.y;
	
	wrapperLoader.window.console = {};
	wrapperLoader.window.console.log = function(msg){
		trace(msg);
	};
	wrapperLoader.window.getMapData = function() {
		return levelDataJson;
	};
	wrapperLoader.window.shouldAutoPlay = function() {
		return shouldAutoPlay;
	};
	wrapperLoader.window.shouldSkipMenu = function() {
		return shouldSkipMenu;
	};
}

function proceed():void {
	trace("Proceeding to load the wrapper");
	
	var request = new URLRequest("cac_wrapper.html");
	wrapperLoader.width = htmlSize.x;
	wrapperLoader.height = htmlSize.y;
	wrapperLoader.x = 0;
	wrapperLoader.y = 0;
	wrapperLoader.load(request);
	wrapperLoader.addEventListener(Event.HTML_DOM_INITIALIZE, onLoaded);
}

if (!isLoadingLevel) {
	proceed();
}

stop();]]></script>
                                   </Actionscript>
                                   <elements/>
                              </DOMFrame>
                         </frames>
                    </DOMLayer>
               </layers>
          </DOMTimeline>
     </timelines>
     <persistentData>
          <PD n="flash.swf.basename" v="cac_wrapper_AIR"/>
          <PD n="flash.fla.filepath" v="cac_wrapper_AIR/cac_wrapper_AIR.xfl"/>
          <PD n="swf.folder.path"/>
          <PD n="TestMovieChecked" v="ADLDesktop"/>
          <PD n="com.air.artemis.airdest" v="CAC_Player.air"/>
          <PD n="com.air.artemis.pubair" v="true"/>
          <PD n="com.air.artemis.pubexe" v="false"/>
          <PD n="com.air.artemis.pubipa" v="false"/>
          <PD n="com.air.artemis.included.count" v="12"/>
          <PD n="com.air.artemis.included.item0" v="cac_wrapper.html"/>
          <PD n="com.air.artemis.included.item1" v="cac_wrapper.swf"/>
          <PD n="com.air.artemis.included.item2" v="loader_v0_5_1_unofficial.swf"/>
          <PD n="com.air.artemis.included.item3" v="v6_4_game.swf"/>
          <PD n="com.air.artemis.included.item4" v="dialogue_wrapper.xml"/>
          <PD n="com.air.artemis.included.item5" v="mods/modlist.xml"/>
          <PD n="com.air.artemis.included.item6" v="mods/redux/modinfo.xml"/>
          <PD n="com.air.artemis.included.item7" v="mods/redux/redux.swf"/>
          <PD n="com.air.artemis.included.item8" v="mods/lost_levels/modinfo.xml"/>
          <PD n="com.air.artemis.included.item9" v="mods/lost_levels/lost_levels.swf"/>
          <PD n="com.air.artemis.included.item10" v="mods/maploader_alpha/modinfo.xml"/>
          <PD n="com.air.artemis.included.item11" v="mods/maploader_alpha/maploader_alpha.swf"/>
     </persistentData>
     <PrinterSettings/>
     <publishHistory/>
</DOMDocument>