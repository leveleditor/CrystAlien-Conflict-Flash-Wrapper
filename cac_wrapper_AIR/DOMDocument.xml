<DOMDocument xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" width="750" frameRate="23" currentTimeline="1" xflVersion="2.1" creatorInfo="Adobe Flash Professional CS5.5" platform="Windows" versionInfo="Saved by Adobe Flash Windows 11.5 build 349" majorVersion="11" minorVersion="5" buildNumber="349" breakPointCount="4294967295" viewAngle3D="70.7391536835426" nextSceneIdentifier="2" playOptionsPlayLoop="false" playOptionsPlayPages="false" playOptionsPlayFrameActions="false" autoSaveEnabled="true" autoSaveIntervalMinutes="1">
     <timelines>
          <DOMTimeline name="Scene 1">
               <layers>
                    <DOMLayer name="Layer 1" color="#4FFF4F" current="true" isSelected="true">
                         <frames>
                              <DOMFrame index="0" keyMode="9728">
                                   <Actionscript>
                                        <script><![CDATA[import flash.desktop.NativeApplication;
import flash.display.NativeWindow;
import flash.display.StageScaleMode;
import flash.display.StageAlign;
import flash.geom.Point;
import flash.events.InvokeEvent;
import flash.filesystem.File;
import flash.html.HTMLLoader;
import flash.utils.ByteArray;
import mx.utils.Base64Decoder;

stage.scaleMode = StageScaleMode.NO_SCALE;
stage.align = StageAlign.TOP_LEFT;

var levelDataJson:String = null;
var shouldAutoPlay:Boolean = true;
var windowSize:Point = new Point(600, 400);
setWindowSize(windowSize);

function setWindowSize(size:Point):void {
	if (stage && stage.nativeWindow) {
		stage.nativeWindow.width = size.x;
		stage.nativeWindow.height = size.y;
		
		// Correct values to account for OS window border sizes
		var actualWidth = stage.stageWidth;
		var actualHeight = stage.stageHeight;
		stage.nativeWindow.width += size.x - actualWidth;
		stage.nativeWindow.height += size.y - actualHeight;
	}
}

function processCommandLineArg(args:Array, index:Number):void {
	trace("Processing command line arg: " + args[index]);
	switch (args[index]) {
		case "-loadlevel":
			var decoder:Base64Decoder = new Base64Decoder();
			decoder.decode(args[index + 1]);
			var bytes:ByteArray = decoder.toByteArray();
			levelDataJson = bytes.toString();
			break;
		case "-autoplay=no":
			shouldAutoPlay = false;
			break;
		case "-autoplay=yes":
			shouldAutoPlay = true;
			break;
		case "-size":
			var windowSizeString = args[index + 1];
			var windowSizes:Array = windowSizeString.split("x", 2);
			windowSize = new Point(Number(windowSizes[0]), Number(windowSizes[1]));
			break;
		default:
			break;
	}
}

function onInvokeEvent(event:InvokeEvent):void {
	for (var i:String in event.arguments) {
		processCommandLineArg(event.arguments, Number(i));
	}
	setWindowSize(windowSize);
}

NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvokeEvent);

var loader:HTMLLoader = new HTMLLoader();
function onLoaded(e:Event):void {
	loader.width = windowSize.x;
	loader.height = windowSize.y;
	
	loader.window.console = {};
	loader.window.console.log = function(msg){
		trace(msg);
	};
	loader.window.getMapData = function() {
		return levelDataJson;
	};
	loader.window.shouldAutoPlay = function() {
		return shouldAutoPlay;
	};
}
var request = new URLRequest("cac_wrapper.html");
loader.width = windowSize.x;
loader.height = windowSize.y;
loader.x = 0;
loader.y = 0;
loader.load(request);
loader.addEventListener(Event.HTML_DOM_INITIALIZE, onLoaded);
addChild(loader);

stop();]]></script>
                                   </Actionscript>
                                   <elements/>
                              </DOMFrame>
                         </frames>
                    </DOMLayer>
               </layers>
          </DOMTimeline>
     </timelines>
     <persistentData>
          <PD n="com.air.artemis.airdest" v="CAC_Player.air"/>
          <PD n="com.air.artemis.included.count" v="12"/>
          <PD n="TestMovieChecked" v="ADLDesktop"/>
          <PD n="com.air.artemis.pubair" v="true"/>
          <PD n="com.air.artemis.included.item0" v="cac_wrapper.html"/>
          <PD n="com.air.artemis.pubipa" v="false"/>
          <PD n="com.air.artemis.included.item1" v="cac_wrapper.swf"/>
          <PD n="com.air.artemis.included.item2" v="loader_v0_5_1_unofficial.swf"/>
          <PD n="com.air.artemis.included.item3" v="v6_4_game.swf"/>
          <PD n="flash.swf.basename" v="cac_wrapper_AIR"/>
          <PD n="com.air.artemis.included.item4" v="dialogue_wrapper.xml"/>
          <PD n="com.air.artemis.included.item5" v="mods/modlist.xml"/>
          <PD n="com.air.artemis.included.item10" v="mods/maploader_alpha/modinfo.xml"/>
          <PD n="com.air.artemis.included.item6" v="mods/redux/modinfo.xml"/>
          <PD n="com.air.artemis.included.item11" v="mods/maploader_alpha/maploader_alpha.swf"/>
          <PD n="com.air.artemis.included.item7" v="mods/redux/redux.swf"/>
          <PD n="flash.fla.filepath" v="cac_wrapper_AIR/cac_wrapper_AIR.xfl"/>
          <PD n="swf.folder.path" v=""/>
          <PD n="com.air.artemis.included.item8" v="mods/lost_levels/modinfo.xml"/>
          <PD n="com.air.artemis.included.item9" v="mods/lost_levels/lost_levels.swf"/>
          <PD n="com.air.artemis.pubexe" v="false"/>
     </persistentData>
     <PrinterSettings/>
     <publishHistory/>
</DOMDocument>